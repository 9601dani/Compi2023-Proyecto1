
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.parserJson;

import com.dani.Token;
import com.dani.models.ErrorModel;
import com.dani.models.ErrorType;
import java_cup.runtime.*;
import com.dani.objects.*;
import com.dani.server.Response;
import com.dani.server.Response_E;
import java.util.ArrayList;

import static com.dani.Main.erroForClient;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\027\013\000\002\027" +
    "\013\000\002\027\003\000\002\026\007\000\002\026\005" +
    "\000\002\025\005\000\002\025\003\000\002\002\011\000" +
    "\002\002\007\000\002\002\007\000\002\002\011\000\002" +
    "\002\011\000\002\002\011\000\002\002\011\000\002\002" +
    "\011\000\002\014\007\000\002\014\005\000\002\013\005" +
    "\000\002\013\003\000\002\016\007\000\002\016\005\000" +
    "\002\015\005\000\002\015\003\000\002\020\007\000\002" +
    "\020\005\000\002\017\005\000\002\017\003\000\002\004" +
    "\005\000\002\004\003\000\002\007\007\000\002\007\007" +
    "\000\002\006\007\000\002\006\007\000\002\012\007\000" +
    "\002\012\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\010\005\000\002\010\005\000\002\003" +
    "\005\000\002\003\003\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\011\000\002\011\011\000" +
    "\002\011\011\000\002\011\011\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\005\000\002\024\005\000\002\024\006\000" +
    "\002\024\006\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\004\025\006\001\002\000\004\002\343\001" +
    "\002\000\006\002\ufffe\024\337\001\002\000\004\040\007" +
    "\001\002\000\026\011\025\012\017\013\020\014\016\015" +
    "\023\016\022\017\024\020\021\056\322\057\321\001\002" +
    "\000\006\024\ufffa\026\ufffa\001\002\000\006\024\012\026" +
    "\013\001\002\000\004\040\014\001\002\000\006\002\ufffc" +
    "\024\ufffc\001\002\000\022\011\025\012\017\013\020\014" +
    "\016\015\023\016\022\017\024\020\021\001\002\000\006" +
    "\024\ufffb\026\ufffb\001\002\000\004\040\236\001\002\000" +
    "\004\040\233\001\002\000\004\040\230\001\002\000\004" +
    "\040\207\001\002\000\004\040\157\001\002\000\004\040" +
    "\116\001\002\000\004\040\033\001\002\000\004\040\026" +
    "\001\002\000\004\050\027\001\002\000\004\040\030\001" +
    "\002\000\004\007\031\001\002\000\004\040\032\001\002" +
    "\000\006\024\ufff9\026\ufff9\001\002\000\004\050\034\001" +
    "\002\000\004\051\035\001\002\000\004\025\036\001\002" +
    "\000\004\040\045\001\002\000\006\024\040\052\041\001" +
    "\002\000\004\025\042\001\002\000\006\024\ufff3\026\ufff3" +
    "\001\002\000\004\040\045\001\002\000\006\024\111\026" +
    "\112\001\002\000\006\024\uffe6\026\uffe6\001\002\000\006" +
    "\027\046\030\047\001\002\000\004\040\106\001\002\000" +
    "\004\040\050\001\002\000\004\050\051\001\002\000\016" +
    "\004\057\021\053\040\063\046\061\047\056\053\060\001" +
    "\002\000\022\024\uffca\026\uffca\040\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\054\uffca\001\002\000\022\024\uffc3\026" +
    "\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\054\uffc3" +
    "\001\002\000\022\024\uffcd\026\uffcd\040\uffcd\042\uffcd\043" +
    "\uffcd\044\103\045\102\054\uffcd\001\002\000\012\024\uffe3" +
    "\026\uffe3\042\067\043\065\001\002\000\004\053\077\001" +
    "\002\000\022\024\uffc9\026\uffc9\040\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\054\uffc9\001\002\000\016\004\057\021" +
    "\053\040\063\046\061\047\056\053\060\001\002\000\004" +
    "\053\072\001\002\000\022\024\uffc8\026\uffc8\040\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\054\uffc8\001\002\000\016" +
    "\004\057\021\053\040\063\046\061\047\056\053\060\001" +
    "\002\000\010\040\066\042\067\043\065\001\002\000\016" +
    "\004\057\021\053\040\063\046\061\047\056\053\060\001" +
    "\002\000\022\024\uffc6\026\uffc6\040\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\054\uffc6\001\002\000\016\004\057\021" +
    "\053\040\063\046\061\047\056\053\060\001\002\000\016" +
    "\024\uffcf\026\uffcf\040\uffcf\042\uffcf\043\065\054\uffcf\001" +
    "\002\000\016\024\uffce\026\uffce\040\uffce\042\uffce\043\uffce" +
    "\054\uffce\001\002\000\016\004\057\021\053\040\063\046" +
    "\061\047\056\053\060\001\002\000\010\042\067\043\065" +
    "\054\074\001\002\000\022\024\uffc5\026\uffc5\040\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\054\uffc5\001\002\000\010" +
    "\042\067\043\065\054\076\001\002\000\022\024\uffc7\026" +
    "\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\054\uffc7" +
    "\001\002\000\016\004\057\021\053\040\063\046\061\047" +
    "\056\053\060\001\002\000\010\042\067\043\065\054\101" +
    "\001\002\000\022\024\uffc4\026\uffc4\040\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\045\uffc4\054\uffc4\001\002\000\016\004\057" +
    "\021\053\040\063\046\061\047\056\053\060\001\002\000" +
    "\016\004\057\021\053\040\063\046\061\047\056\053\060" +
    "\001\002\000\022\024\uffcc\026\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\102\054\uffcc\001\002\000\022\024\uffcb" +
    "\026\uffcb\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\054" +
    "\uffcb\001\002\000\004\050\107\001\002\000\016\004\057" +
    "\021\053\040\063\046\061\047\056\053\060\001\002\000" +
    "\012\024\uffe2\026\uffe2\042\067\043\065\001\002\000\004" +
    "\040\045\001\002\000\006\024\uffe9\052\uffe9\001\002\000" +
    "\006\024\uffe7\026\uffe7\001\002\000\006\024\111\026\115" +
    "\001\002\000\006\024\uffe8\052\uffe8\001\002\000\004\050" +
    "\117\001\002\000\004\051\120\001\002\000\004\025\122" +
    "\001\002\000\006\024\152\052\153\001\002\000\004\040" +
    "\124\001\002\000\006\024\uffee\026\uffee\001\002\000\010" +
    "\027\131\030\132\031\133\001\002\000\006\024\126\026" +
    "\127\001\002\000\004\040\124\001\002\000\006\024\ufff0" +
    "\052\ufff0\001\002\000\006\024\uffef\026\uffef\001\002\000" +
    "\004\040\147\001\002\000\004\040\144\001\002\000\004" +
    "\040\134\001\002\000\004\050\135\001\002\000\004\040" +
    "\137\001\002\000\006\024\uffdb\026\uffdb\001\002\000\006" +
    "\005\141\006\140\001\002\000\004\040\143\001\002\000" +
    "\004\040\142\001\002\000\006\024\uffda\026\uffda\001\002" +
    "\000\006\024\uffd9\026\uffd9\001\002\000\004\050\145\001" +
    "\002\000\016\004\057\021\053\040\063\046\061\047\056" +
    "\053\060\001\002\000\012\024\uffdd\026\uffdd\042\067\043" +
    "\065\001\002\000\004\050\150\001\002\000\016\004\057" +
    "\021\053\040\063\046\061\047\056\053\060\001\002\000" +
    "\012\024\uffdc\026\uffdc\042\067\043\065\001\002\000\004" +
    "\025\154\001\002\000\006\024\ufff5\026\ufff5\001\002\000" +
    "\004\040\124\001\002\000\006\024\126\026\156\001\002" +
    "\000\006\024\ufff1\052\ufff1\001\002\000\004\050\160\001" +
    "\002\000\004\051\161\001\002\000\004\025\163\001\002" +
    "\000\006\024\202\052\203\001\002\000\004\040\165\001" +
    "\002\000\006\024\uffea\026\uffea\001\002\000\006\027\172" +
    "\030\173\001\002\000\006\024\167\026\170\001\002\000" +
    "\004\040\165\001\002\000\006\024\uffec\052\uffec\001\002" +
    "\000\006\024\uffeb\026\uffeb\001\002\000\004\040\177\001" +
    "\002\000\004\040\174\001\002\000\004\050\175\001\002" +
    "\000\016\004\057\021\053\040\063\046\061\047\056\053" +
    "\060\001\002\000\012\024\uffe1\026\uffe1\042\067\043\065" +
    "\001\002\000\004\050\200\001\002\000\016\004\057\021" +
    "\053\040\063\046\061\047\056\053\060\001\002\000\012" +
    "\024\uffe0\026\uffe0\042\067\043\065\001\002\000\004\025" +
    "\204\001\002\000\006\024\ufff4\026\ufff4\001\002\000\004" +
    "\040\165\001\002\000\006\024\167\026\206\001\002\000" +
    "\006\024\uffed\052\uffed\001\002\000\004\050\210\001\002" +
    "\000\004\025\211\001\002\000\004\040\213\001\002\000" +
    "\006\024\uffe4\026\uffe4\001\002\000\006\027\220\030\221" +
    "\001\002\000\006\024\215\026\216\001\002\000\004\040" +
    "\213\001\002\000\006\024\ufff2\026\ufff2\001\002\000\006" +
    "\024\uffe5\026\uffe5\001\002\000\004\040\225\001\002\000" +
    "\004\040\222\001\002\000\004\050\223\001\002\000\016" +
    "\004\057\021\053\040\063\046\061\047\056\053\060\001" +
    "\002\000\012\024\uffdf\026\uffdf\042\067\043\065\001\002" +
    "\000\004\050\226\001\002\000\016\004\057\021\053\040" +
    "\063\046\061\047\056\053\060\001\002\000\012\024\uffde" +
    "\026\uffde\042\067\043\065\001\002\000\004\050\231\001" +
    "\002\000\016\004\057\021\053\040\063\046\061\047\056" +
    "\053\060\001\002\000\012\024\ufff7\026\ufff7\042\067\043" +
    "\065\001\002\000\004\050\234\001\002\000\016\004\057" +
    "\021\053\040\063\046\061\047\056\053\060\001\002\000" +
    "\012\024\ufff8\026\ufff8\042\067\043\065\001\002\000\004" +
    "\050\237\001\002\000\004\025\240\001\002\000\004\040" +
    "\242\001\002\000\006\024\316\026\317\001\002\000\020" +
    "\022\247\032\246\033\252\034\250\035\245\036\244\037" +
    "\251\001\002\000\006\024\uffd7\026\uffd7\001\002\000\004" +
    "\040\311\001\002\000\004\040\304\001\002\000\004\040" +
    "\277\001\002\000\004\040\272\001\002\000\004\040\265" +
    "\001\002\000\004\040\260\001\002\000\004\040\253\001" +
    "\002\000\004\050\254\001\002\000\004\040\255\001\002" +
    "\000\004\041\256\001\002\000\004\040\257\001\002\000" +
    "\006\024\uffd5\026\uffd5\001\002\000\004\050\261\001\002" +
    "\000\004\040\262\001\002\000\004\041\263\001\002\000" +
    "\004\040\264\001\002\000\006\024\uffd1\026\uffd1\001\002" +
    "\000\004\050\266\001\002\000\004\040\267\001\002\000" +
    "\004\041\270\001\002\000\004\040\271\001\002\000\006" +
    "\024\uffd4\026\uffd4\001\002\000\004\050\273\001\002\000" +
    "\004\040\274\001\002\000\004\041\275\001\002\000\004" +
    "\040\276\001\002\000\006\024\uffd0\026\uffd0\001\002\000" +
    "\004\050\300\001\002\000\004\040\301\001\002\000\004" +
    "\041\302\001\002\000\004\040\303\001\002\000\006\024" +
    "\uffd6\026\uffd6\001\002\000\004\050\305\001\002\000\004" +
    "\040\306\001\002\000\004\041\307\001\002\000\004\040" +
    "\310\001\002\000\006\024\uffd3\026\uffd3\001\002\000\004" +
    "\050\312\001\002\000\004\040\313\001\002\000\004\041" +
    "\314\001\002\000\004\040\315\001\002\000\006\024\uffd2" +
    "\026\uffd2\001\002\000\004\040\242\001\002\000\006\024" +
    "\ufff6\026\ufff6\001\002\000\006\024\uffd8\026\uffd8\001\002" +
    "\000\004\040\331\001\002\000\004\040\323\001\002\000" +
    "\004\050\324\001\002\000\004\040\325\001\002\000\004" +
    "\060\326\001\002\000\004\040\327\001\002\000\004\026" +
    "\330\001\002\000\004\002\000\001\002\000\004\050\332" +
    "\001\002\000\004\040\333\001\002\000\004\007\334\001" +
    "\002\000\004\040\335\001\002\000\004\026\336\001\002" +
    "\000\004\002\uffff\001\002\000\004\025\340\001\002\000" +
    "\004\040\014\001\002\000\006\024\012\026\342\001\002" +
    "\000\006\002\ufffd\024\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\026\004\027\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\007\025\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\036\001\001\000\006\007\043\017\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\043\017\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\054\022\053\023\051" +
    "\024\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\074\022\053\023\051\024\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\063" +
    "\022\053\023\051\024\061\001\001\000\002\001\001\000" +
    "\012\021\070\022\053\023\051\024\061\001\001\000\002" +
    "\001\001\000\012\021\067\022\053\023\051\024\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\072" +
    "\022\053\023\051\024\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\077\022\053\023\051\024\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\104\023\051\024\061" +
    "\001\001\000\010\022\103\023\051\024\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\107\022\053\023\051\024\061\001\001\000\002\001" +
    "\001\000\004\007\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\120\001\001\000\002" +
    "\001\001\000\006\005\122\013\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\145\022" +
    "\053\023\051\024\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\150\022\053\023\051\024\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\122\013\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\161\001\001\000\002\001\001\000\006\006\163\015" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\175\022\053\023\051\024\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\200" +
    "\022\053\023\051\024\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\163\015\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\213\012\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\223\022\053\023\051\024\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\226\022\053\023" +
    "\051\024\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\231\022\053\023\051\024\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\234\022\053" +
    "\023\051\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\240\011\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\007\025\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



                    public ParserJson(Lexer lexer){
                       super(lexer);
                   }

                   public Symbol scan() throws Exception {
                               Symbol symbol = this.getScanner().next_token();
                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               while(symbol != null && symbol.sym == ParserJsonSym.SYM) {
                                   this.report_expected_token_ids();
                                   System.out.println("Ingorando: " + symbol.value.toString());
                                   Token token = (Token) symbol.value;
                                   erroForClient.add(new ErrorModel(token.getLexeme(),token.getLine(),token.getColumn(), ErrorType.LEXICO,"No existe esta cadena en el lenguaje"));
                                   symbol = this.getScanner().next_token();
                               }

                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               return symbol;
                       }
                       public void syntax_error(Symbol cur_token) {
                               Token token = (Token) cur_token.value;

                               if (cur_token.sym == ParserJsonSym.EOF) {
                       //          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "Simbolo inesperado";
                                   erroForClient.add(new ErrorModel("Fin del archivo", token.getLine(),token.getColumn(), ErrorType.SINTACTICO,er));
                                   System.out.println(er);
                               } else {
                                   String er = "Simbolo inesperado";
                                   erroForClient.add(new ErrorModel(token.getLexeme(), token.getLine(), token.getColumn(),ErrorType.SINTACTICO,er));

                                   System.out.println(er);
                               }
                           }

                           public void unrecovered_syntax_error(Symbol cur_token) {
                               if (cur_token.sym == ParserJsonSym.EOF) {
                                   Token tok = (Token) cur_token.value;
                                   String er = "No se puede recuperar el error, ya no hay mas tokens";
                                   erroForClient.add(new ErrorModel("FIN ARCHIVO", tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                   System.out.println(er);
                               } else {
                                   Token tok = (Token) cur_token.value;
                                   //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "no se puede recuperar el error";
                                   erroForClient.add(new ErrorModel(tok.getLexeme(), tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                   System.out.println(er);
                               }
                           }
                                       /*public Symbol scan() throws Exception{
                                           Symbol sym= this.getScanner().next_token();
                                           if(sym == null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           while(sym != null && sym.sym== parse().SYM){
                                               this.report_expected_token_ids();
                                               System.out.println("ignorando : "+ sym.value.toString());
                                               sym= this.getScanner().next_token();
                                           }
                                           if(sym== null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           return sym;
                                       }*/

                   /*public void syntax_error(Symbol s){

                    converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                    new Response(Response_E.NOTHING);
                   }
                   public void unrecovered_syntax_error(Symbol s){
                   converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                   new Response(Response_E.NOTHING);
                   }*/
                   public static World worldSingleton;
                       public static World getSingletonInstanceWorld() {
                           if (worldSingleton == null){
                               worldSingleton = new World();
                           }
                           else{
                              /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                           }
                           return worldSingleton;
                       }

                        public static Board boardSingleton;
                               public static Board getSingletonInstanceBoard() {
                                   if (boardSingleton == null){
                                       boardSingleton = new Board();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                                   }
                                   return boardSingleton;
                               }
                         public static Box boxSingleton;
                               public static Box getSingletonInstanceBox() {
                                   if (boxSingleton == null){
                                       boxSingleton = new Box();
                                   }
                                   else{
                                      /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                                   }
                                       return boxSingleton;
                               }
                         public static Target targetSingleton;
                               public static Target getSingletonInstanceTarget() {
                                   if (targetSingleton == null){
                                       targetSingleton = new Target();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                                   }
                                   return targetSingleton;
                               }
                         public static Player playerSingleton;
                               public static Player getSingletonInstancePlayer() {
                                   if (playerSingleton == null){
                                       playerSingleton = new Player();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                                   }
                                   return playerSingleton;
                               }
                         public static ConfigWorld configSingleton;
                               public static ConfigWorld getSingletonInstanceConfig() {
                                   if (configSingleton == null){
                                       configSingleton = new ConfigWorld();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                                   }
                                   return configSingleton;
                               }
                          public static Response response;
                               public static Response getSingletonInstanceResponse() {
                                   if (response == null){
                                       response = new Response();
                                   }
                                   else{
                                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                                   }
                                   return response;
                               }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
      switch (CUP$ParserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Response start_val = (Response)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = start_val;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJson$parser.done_parsing();
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inic ::= LLAVE_A COMILLA WORLDS COMILLA DOS_PUNTOS COMILLA ALL COMILLA LLAVE_C 
            {
              Response RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		RESULT=new Response(Response_E.REQUEST_ALL_WORLDS,null,null,null);
                                                                           System.out.println("mandare todos los mundos");  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic",21, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inic ::= LLAVE_A COMILLA WORLD COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA LLAVE_C 
            {
              Response RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		RESULT=new Response(Response_E.REQUEST_FOR_NAME,null,a.getLexeme(),null);
                                                                            System.out.println("mandare el mundo pedido " +a.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic",21, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inic ::= worldPro 
            {
              Response RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		ArrayList<World> a = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		
                    RESULT= new Response(Response_E.REQUEST_NEW_WORLD,a,null,null);
                     /*RESULT= new Response(Response_E.REQUEST_NEW_WORLD,a);*/
                        
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic",21, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // worldPro ::= worldPro COMA LLAVE_A atri LLAVE_C 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                               getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer());
                n1.add(a1);
                RESULT=n1;
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro",20, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // worldPro ::= LLAVE_A atri LLAVE_C 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
             RESULT= new ArrayList<World>();
             RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                     getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer()));
                                                                                                  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro",20, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atri ::= atri COMA producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri",19, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atri ::= producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri",19, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // producWorld ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setName(a1.getLexeme());
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // producWorld ::= COMILLA ROWS COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceWorld().setRows(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // producWorld ::= COMILLA COLS COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceWorld().setCols(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // producWorld ::= COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A config LLAVE_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),getSingletonInstanceConfig().getTarget_color(),
                                                     getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // producWorld ::= COMILLA BOARD COMILLA DOS_PUNTOS L_CORCHETE configBoardArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		   
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // producWorld ::= COMILLA BOXES COMILLA DOS_PUNTOS L_CORCHETE configBoxArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // producWorld ::= COMILLA TARGETS COMILLA DOS_PUNTOS L_CORCHETE configTargetArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // producWorld ::= COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A configPlayer LLAVE_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // configBoardArray ::= configBoardArray COMA LLAVE_A configBoard LLAVE_C 
            {
              Object RESULT =null;
		 getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // configBoardArray ::= LLAVE_A configBoard LLAVE_C 
            {
              Object RESULT =null;
		getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configBoard ::= configBoard COMA posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configBoard ::= posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configBoxArray ::= configBoxArray COMA LLAVE_A configBox LLAVE_C 
            {
              Object RESULT =null;
		  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configBoxArray ::= LLAVE_A configBox LLAVE_C 
            {
              Object RESULT =null;
		  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configBox ::= configBox COMA posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configBox ::= posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configTargetArray ::= configTargetArray COMA LLAVE_A configTarget LLAVE_C 
            {
              Object RESULT =null;
		 getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // configTargetArray ::= LLAVE_A configTarget LLAVE_C 
            {
              Object RESULT =null;
		getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // configTarget ::= configTarget COMA posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // configTarget ::= posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // configPlayer ::= configPlayer COMA posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // configPlayer ::= posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // posT ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceTarget().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // posT ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceTarget().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // posBox ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceBox().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // posBox ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		   getSingletonInstanceBox().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // posPlayer ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstancePlayer().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // posPlayer ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		   getSingletonInstancePlayer().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // posTB ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // posTB ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // posTB ::= COMILLA TYPE COMILLA DOS_PUNTOS typeH 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setType((Integer)a1); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typeH ::= COMILLA HALL COMILLA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 RESULT= t1.getTokenType() ;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typeH ::= COMILLA BRICK COMILLA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 RESULT=t1.getTokenType() ;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // config ::= config COMA configPro 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // config ::= configPro 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // configPro ::= COMILLA BOX_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBox_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // configPro ::= COMILLA BOX_ON_TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // configPro ::= COMILLA TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setTarget_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // configPro ::= COMILLA BRICK_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBrick_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // configPro ::= COMILLA HALL_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setHall_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // configPro ::= COMILLA UNDEFINED_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // configPro ::= COMILLA PLAYER_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion1 ::= operacion1 SUMA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 + a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacion1 ::= operacion1 RESTA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 - a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacion1 ::= operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion2 ::= operacion2 MULTIPLY operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 * a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacion2 ::= operacion2 DIVISION operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 / a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion2 ::= operacion3 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion3 ::= ENTERO 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3",17, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion3 ::= operacion4 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3",17, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion4 ::= L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion4 ::= COMILLA operacion1 COMILLA 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion4 ::= CEIL L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = Math.ceil(a1);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operacion4 ::= FLOOR L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = Math.floor(a1);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operacion4 ::= DECIMAL 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
