
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.parserJson;

import com.dani.Token;
import com.dani.objects.*;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\027\003\000\002\026" +
    "\007\000\002\026\005\000\002\025\005\000\002\025\003" +
    "\000\002\002\011\000\002\002\007\000\002\002\007\000" +
    "\002\002\011\000\002\002\011\000\002\002\011\000\002" +
    "\002\011\000\002\002\011\000\002\014\007\000\002\014" +
    "\005\000\002\013\005\000\002\013\003\000\002\016\007" +
    "\000\002\016\005\000\002\015\005\000\002\015\003\000" +
    "\002\020\007\000\002\020\005\000\002\017\005\000\002" +
    "\017\003\000\002\004\005\000\002\004\003\000\002\007" +
    "\007\000\002\007\007\000\002\006\007\000\002\006\007" +
    "\000\002\012\007\000\002\012\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\010\005\000\002" +
    "\010\005\000\002\003\005\000\002\003\003\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\011\000\002\011\011\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\006\000\002\024\006\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\025\006\001\002\000\004\002\324\001" +
    "\002\000\006\002\000\024\320\001\002\000\004\040\007" +
    "\001\002\000\022\011\024\012\016\013\017\014\015\015" +
    "\022\016\021\017\023\020\020\001\002\000\006\024\012" +
    "\026\013\001\002\000\006\024\ufffc\026\ufffc\001\002\000" +
    "\004\040\007\001\002\000\006\002\ufffe\024\ufffe\001\002" +
    "\000\006\024\ufffd\026\ufffd\001\002\000\004\040\235\001" +
    "\002\000\004\040\232\001\002\000\004\040\227\001\002" +
    "\000\004\040\206\001\002\000\004\040\156\001\002\000" +
    "\004\040\115\001\002\000\004\040\032\001\002\000\004" +
    "\040\025\001\002\000\004\050\026\001\002\000\004\040" +
    "\027\001\002\000\004\007\030\001\002\000\004\040\031" +
    "\001\002\000\006\024\ufffb\026\ufffb\001\002\000\004\050" +
    "\033\001\002\000\004\051\034\001\002\000\004\025\035" +
    "\001\002\000\004\040\044\001\002\000\006\024\037\052" +
    "\040\001\002\000\004\025\041\001\002\000\006\024\ufff5" +
    "\026\ufff5\001\002\000\004\040\044\001\002\000\006\024" +
    "\110\026\111\001\002\000\006\024\uffe8\026\uffe8\001\002" +
    "\000\006\027\045\030\046\001\002\000\004\040\105\001" +
    "\002\000\004\040\047\001\002\000\004\050\050\001\002" +
    "\000\016\004\056\021\052\040\062\046\060\047\055\053" +
    "\057\001\002\000\022\024\uffcc\026\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\054\uffcc\001\002\000\022\024" +
    "\uffc5\026\uffc5\040\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\054\uffc5\001\002\000\022\024\uffcf\026\uffcf\040\uffcf\042" +
    "\uffcf\043\uffcf\044\102\045\101\054\uffcf\001\002\000\012" +
    "\024\uffe5\026\uffe5\042\066\043\064\001\002\000\004\053" +
    "\076\001\002\000\022\024\uffcb\026\uffcb\040\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\054\uffcb\001\002\000\016\004" +
    "\056\021\052\040\062\046\060\047\055\053\057\001\002" +
    "\000\004\053\071\001\002\000\022\024\uffca\026\uffca\040" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\054\uffca\001\002" +
    "\000\016\004\056\021\052\040\062\046\060\047\055\053" +
    "\057\001\002\000\010\040\065\042\066\043\064\001\002" +
    "\000\016\004\056\021\052\040\062\046\060\047\055\053" +
    "\057\001\002\000\022\024\uffc8\026\uffc8\040\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\054\uffc8\001\002\000\016\004" +
    "\056\021\052\040\062\046\060\047\055\053\057\001\002" +
    "\000\016\024\uffd1\026\uffd1\040\uffd1\042\uffd1\043\064\054" +
    "\uffd1\001\002\000\016\024\uffd0\026\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\054\uffd0\001\002\000\016\004\056\021\052\040" +
    "\062\046\060\047\055\053\057\001\002\000\010\042\066" +
    "\043\064\054\073\001\002\000\022\024\uffc7\026\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\054\uffc7\001\002" +
    "\000\010\042\066\043\064\054\075\001\002\000\022\024" +
    "\uffc9\026\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\054\uffc9\001\002\000\016\004\056\021\052\040\062\046" +
    "\060\047\055\053\057\001\002\000\010\042\066\043\064" +
    "\054\100\001\002\000\022\024\uffc6\026\uffc6\040\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\054\uffc6\001\002\000\016" +
    "\004\056\021\052\040\062\046\060\047\055\053\057\001" +
    "\002\000\016\004\056\021\052\040\062\046\060\047\055" +
    "\053\057\001\002\000\022\024\uffce\026\uffce\040\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\101\054\uffce\001\002\000\022" +
    "\024\uffcd\026\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\054\uffcd\001\002\000\004\050\106\001\002\000\016" +
    "\004\056\021\052\040\062\046\060\047\055\053\057\001" +
    "\002\000\012\024\uffe4\026\uffe4\042\066\043\064\001\002" +
    "\000\004\040\044\001\002\000\006\024\uffeb\052\uffeb\001" +
    "\002\000\006\024\uffe9\026\uffe9\001\002\000\006\024\110" +
    "\026\114\001\002\000\006\024\uffea\052\uffea\001\002\000" +
    "\004\050\116\001\002\000\004\051\117\001\002\000\004" +
    "\025\121\001\002\000\006\024\151\052\152\001\002\000" +
    "\004\040\123\001\002\000\006\024\ufff0\026\ufff0\001\002" +
    "\000\010\027\130\030\131\031\132\001\002\000\006\024" +
    "\125\026\126\001\002\000\004\040\123\001\002\000\006" +
    "\024\ufff2\052\ufff2\001\002\000\006\024\ufff1\026\ufff1\001" +
    "\002\000\004\040\146\001\002\000\004\040\143\001\002" +
    "\000\004\040\133\001\002\000\004\050\134\001\002\000" +
    "\004\040\136\001\002\000\006\024\uffdd\026\uffdd\001\002" +
    "\000\006\005\140\006\137\001\002\000\004\040\142\001" +
    "\002\000\004\040\141\001\002\000\006\024\uffdc\026\uffdc" +
    "\001\002\000\006\024\uffdb\026\uffdb\001\002\000\004\050" +
    "\144\001\002\000\016\004\056\021\052\040\062\046\060" +
    "\047\055\053\057\001\002\000\012\024\uffdf\026\uffdf\042" +
    "\066\043\064\001\002\000\004\050\147\001\002\000\016" +
    "\004\056\021\052\040\062\046\060\047\055\053\057\001" +
    "\002\000\012\024\uffde\026\uffde\042\066\043\064\001\002" +
    "\000\004\025\153\001\002\000\006\024\ufff7\026\ufff7\001" +
    "\002\000\004\040\123\001\002\000\006\024\125\026\155" +
    "\001\002\000\006\024\ufff3\052\ufff3\001\002\000\004\050" +
    "\157\001\002\000\004\051\160\001\002\000\004\025\162" +
    "\001\002\000\006\024\201\052\202\001\002\000\004\040" +
    "\164\001\002\000\006\024\uffec\026\uffec\001\002\000\006" +
    "\027\171\030\172\001\002\000\006\024\166\026\167\001" +
    "\002\000\004\040\164\001\002\000\006\024\uffee\052\uffee" +
    "\001\002\000\006\024\uffed\026\uffed\001\002\000\004\040" +
    "\176\001\002\000\004\040\173\001\002\000\004\050\174" +
    "\001\002\000\016\004\056\021\052\040\062\046\060\047" +
    "\055\053\057\001\002\000\012\024\uffe3\026\uffe3\042\066" +
    "\043\064\001\002\000\004\050\177\001\002\000\016\004" +
    "\056\021\052\040\062\046\060\047\055\053\057\001\002" +
    "\000\012\024\uffe2\026\uffe2\042\066\043\064\001\002\000" +
    "\004\025\203\001\002\000\006\024\ufff6\026\ufff6\001\002" +
    "\000\004\040\164\001\002\000\006\024\166\026\205\001" +
    "\002\000\006\024\uffef\052\uffef\001\002\000\004\050\207" +
    "\001\002\000\004\025\210\001\002\000\004\040\212\001" +
    "\002\000\006\024\uffe6\026\uffe6\001\002\000\006\027\217" +
    "\030\220\001\002\000\006\024\214\026\215\001\002\000" +
    "\004\040\212\001\002\000\006\024\ufff4\026\ufff4\001\002" +
    "\000\006\024\uffe7\026\uffe7\001\002\000\004\040\224\001" +
    "\002\000\004\040\221\001\002\000\004\050\222\001\002" +
    "\000\016\004\056\021\052\040\062\046\060\047\055\053" +
    "\057\001\002\000\012\024\uffe1\026\uffe1\042\066\043\064" +
    "\001\002\000\004\050\225\001\002\000\016\004\056\021" +
    "\052\040\062\046\060\047\055\053\057\001\002\000\012" +
    "\024\uffe0\026\uffe0\042\066\043\064\001\002\000\004\050" +
    "\230\001\002\000\016\004\056\021\052\040\062\046\060" +
    "\047\055\053\057\001\002\000\012\024\ufff9\026\ufff9\042" +
    "\066\043\064\001\002\000\004\050\233\001\002\000\016" +
    "\004\056\021\052\040\062\046\060\047\055\053\057\001" +
    "\002\000\012\024\ufffa\026\ufffa\042\066\043\064\001\002" +
    "\000\004\050\236\001\002\000\004\025\237\001\002\000" +
    "\004\040\241\001\002\000\006\024\315\026\316\001\002" +
    "\000\020\022\246\032\245\033\251\034\247\035\244\036" +
    "\243\037\250\001\002\000\006\024\uffd9\026\uffd9\001\002" +
    "\000\004\040\310\001\002\000\004\040\303\001\002\000" +
    "\004\040\276\001\002\000\004\040\271\001\002\000\004" +
    "\040\264\001\002\000\004\040\257\001\002\000\004\040" +
    "\252\001\002\000\004\050\253\001\002\000\004\040\254" +
    "\001\002\000\004\041\255\001\002\000\004\040\256\001" +
    "\002\000\006\024\uffd7\026\uffd7\001\002\000\004\050\260" +
    "\001\002\000\004\040\261\001\002\000\004\041\262\001" +
    "\002\000\004\040\263\001\002\000\006\024\uffd3\026\uffd3" +
    "\001\002\000\004\050\265\001\002\000\004\040\266\001" +
    "\002\000\004\041\267\001\002\000\004\040\270\001\002" +
    "\000\006\024\uffd6\026\uffd6\001\002\000\004\050\272\001" +
    "\002\000\004\040\273\001\002\000\004\041\274\001\002" +
    "\000\004\040\275\001\002\000\006\024\uffd2\026\uffd2\001" +
    "\002\000\004\050\277\001\002\000\004\040\300\001\002" +
    "\000\004\041\301\001\002\000\004\040\302\001\002\000" +
    "\006\024\uffd8\026\uffd8\001\002\000\004\050\304\001\002" +
    "\000\004\040\305\001\002\000\004\041\306\001\002\000" +
    "\004\040\307\001\002\000\006\024\uffd5\026\uffd5\001\002" +
    "\000\004\050\311\001\002\000\004\040\312\001\002\000" +
    "\004\041\313\001\002\000\004\040\314\001\002\000\006" +
    "\024\uffd4\026\uffd4\001\002\000\004\040\241\001\002\000" +
    "\006\024\ufff8\026\ufff8\001\002\000\006\024\uffda\026\uffda" +
    "\001\002\000\004\025\321\001\002\000\004\040\007\001" +
    "\002\000\006\024\012\026\323\001\002\000\006\002\uffff" +
    "\024\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\026\004\027\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\010\025\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\035\001" +
    "\001\000\006\007\042\017\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\042\017" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\021\053\022\052\023\050\024\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\073\022\052\023\050\024\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\062\022\052\023\050" +
    "\024\060\001\001\000\002\001\001\000\012\021\067\022" +
    "\052\023\050\024\060\001\001\000\002\001\001\000\012" +
    "\021\066\022\052\023\050\024\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\071\022\052\023\050" +
    "\024\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\076\022\052" +
    "\023\050\024\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\103\023\050\024\060\001\001\000\010" +
    "\022\102\023\050\024\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\106\022\052" +
    "\023\050\024\060\001\001\000\002\001\001\000\004\007" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\117\001\001\000\002\001\001\000\006" +
    "\005\121\013\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\144\022\052\023\050\024" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\147\022\052\023\050\024\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\121" +
    "\013\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\160\001\001" +
    "\000\002\001\001\000\006\006\162\015\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\174\022\052\023\050\024\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\177\022\052\023\050" +
    "\024\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\162\015\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\212\012\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\222\022" +
    "\052\023\050\024\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\225\022\052\023\050\024\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\230" +
    "\022\052\023\050\024\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\233\022\052\023\050\024\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\237\011\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\010\025\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



                    public ParserJson(Lexer lexer){
                       super(lexer);
                   }
                   public static World worldSingleton;
                       public static World getSingletonInstanceWorld() {
                           if (worldSingleton == null){
                               worldSingleton = new World();
                           }
                           else{
                               System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");
                           }
                           return worldSingleton;
                       }

                        public static Board boardSingleton;
                               public static Board getSingletonInstanceBoard() {
                                   if (boardSingleton == null){
                                       boardSingleton = new Board();
                                   }
                                   else{
                                       System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");
                                   }
                                   return boardSingleton;
                               }
                         public static Box boxSingleton;
                               public static Box getSingletonInstanceBox() {
                                   if (boxSingleton == null){
                                       boxSingleton = new Box();
                                   }
                                   else{
                                       System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");
                                   }
                                       return boxSingleton;
                               }
                         public static Target targetSingleton;
                               public static Target getSingletonInstanceTarget() {
                                   if (targetSingleton == null){
                                       targetSingleton = new Target();
                                   }
                                   else{
                                       System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");
                                   }
                                   return targetSingleton;
                               }
                         public static Player playerSingleton;
                               public static Player getSingletonInstancePlayer() {
                                   if (playerSingleton == null){
                                       playerSingleton = new Player();
                                   }
                                   else{
                                       System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");
                                   }
                                   return playerSingleton;
                               }
                         public static ConfigWorld configSingleton;
                               public static ConfigWorld getSingletonInstanceConfig() {
                                   if (configSingleton == null){
                                       configSingleton = new ConfigWorld();
                                   }
                                   else{
                                       System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");
                                   }
                                   return configSingleton;
                               }

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
      switch (CUP$ParserJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		ArrayList<World> start_val = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = start_val;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJson$parser.done_parsing();
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inic ::= worldPro 
            {
              ArrayList<World> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		ArrayList<World> a = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT=a;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic",21, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // worldPro ::= worldPro COMA LLAVE_A atri LLAVE_C 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
                a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                               getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer());
                n1.add(a1);
                RESULT=n1;
                
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro",20, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // worldPro ::= LLAVE_A atri LLAVE_C 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		
             RESULT= new ArrayList<World>();
             RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                     getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer()));
                                                                                                  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro",20, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // atri ::= atri COMA producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri",19, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // atri ::= producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri",19, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // producWorld ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setName(a1.getLexeme());
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // producWorld ::= COMILLA ROWS COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceWorld().setRows(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // producWorld ::= COMILLA COLS COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceWorld().setCols(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // producWorld ::= COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A config LLAVE_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),getSingletonInstanceConfig().getTarget_color(),
                                                     getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // producWorld ::= COMILLA BOARD COMILLA DOS_PUNTOS L_CORCHETE configBoardArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType()));  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // producWorld ::= COMILLA BOXES COMILLA DOS_PUNTOS L_CORCHETE configBoxArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY()));  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // producWorld ::= COMILLA TARGETS COMILLA DOS_PUNTOS L_CORCHETE configTargetArray R_CORCHETE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // producWorld ::= COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A configPlayer LLAVE_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY())); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // configBoardArray ::= configBoardArray COMA LLAVE_A configBoard LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // configBoardArray ::= LLAVE_A configBoard LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray",10, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // configBoard ::= configBoard COMA posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // configBoard ::= posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard",9, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configBoxArray ::= configBoxArray COMA LLAVE_A configBox LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configBoxArray ::= LLAVE_A configBox LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray",12, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configBox ::= configBox COMA posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configBox ::= posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox",11, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configTargetArray ::= configTargetArray COMA LLAVE_A configTarget LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configTargetArray ::= LLAVE_A configTarget LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray",14, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configTarget ::= configTarget COMA posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // configTarget ::= posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget",13, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // configPlayer ::= configPlayer COMA posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // configPlayer ::= posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // posT ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceTarget().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // posT ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceTarget().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // posBox ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstanceBox().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // posBox ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		   getSingletonInstanceBox().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // posPlayer ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 getSingletonInstancePlayer().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // posPlayer ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		   getSingletonInstancePlayer().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // posTB ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setPosX(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // posTB ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setPosY(a1.intValue()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // posTB ::= COMILLA TYPE COMILLA DOS_PUNTOS typeH 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		  getSingletonInstanceBoard().setType((Integer)a1); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typeH ::= COMILLA HALL COMILLA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 RESULT= t1.getTokenType() ;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typeH ::= COMILLA BRICK COMILLA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		 RESULT=t1.getTokenType() ;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // config ::= config COMA configPro 
            {
              Object RESULT =null;

              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // config ::= configPro 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // configPro ::= COMILLA BOX_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBox_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // configPro ::= COMILLA BOX_ON_TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // configPro ::= COMILLA TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setTarget_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // configPro ::= COMILLA BRICK_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setBrick_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // configPro ::= COMILLA HALL_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setHall_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // configPro ::= COMILLA UNDEFINED_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // configPro ::= COMILLA PLAYER_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		  getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());  
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operacion1 ::= operacion1 SUMA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 + a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operacion1 ::= operacion1 RESTA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 - a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operacion1 ::= operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1",15, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operacion2 ::= operacion2 MULTIPLY operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 * a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operacion2 ::= operacion2 DIVISION operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 / a2 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operacion2 ::= operacion3 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2",16, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operacion3 ::= ENTERO 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3",17, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operacion3 ::= operacion4 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3",17, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operacion4 ::= L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operacion4 ::= COMILLA operacion1 COMILLA 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT =a1;
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operacion4 ::= CEIL L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = Math.ceil(a1);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operacion4 ::= FLOOR L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-1)).value;
		RESULT = Math.floor(a1);
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.elementAt(CUP$ParserJson$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operacion4 ::= DECIMAL 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserJson$stack.peek()).value;
		 RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4",18, ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJson$stack.peek()), RESULT);
            }
          return CUP$ParserJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
