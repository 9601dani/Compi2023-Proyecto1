
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.parserJson;

import com.dani.Token;
import com.dani.models.ErrorModel;
import com.dani.models.ErrorType;
import com.dani.server.Converter;
import java_cup.runtime.*;
import com.dani.objects.*;
import java.util.ArrayList;

import static com.dani.Main.erroForClient;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserJsonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\027\013\000\002\027" +
    "\013\000\002\027\003\000\002\027\004\000\002\027\004" +
    "\000\002\027\004\000\002\027\004\000\002\026\007\000" +
    "\002\026\005\000\002\026\004\000\002\025\005\000\002" +
    "\025\003\000\002\025\004\000\002\002\011\000\002\002" +
    "\007\000\002\002\007\000\002\002\011\000\002\002\011" +
    "\000\002\002\011\000\002\002\011\000\002\002\011\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\014" +
    "\007\000\002\014\005\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\004\000\002\016\007\000\002\016\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\015" +
    "\005\000\002\015\003\000\002\015\004\000\002\020\007" +
    "\000\002\020\005\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\017\005\000\002\017\003\000\002" +
    "\017\004\000\002\004\005\000\002\004\003\000\002\004" +
    "\004\000\002\007\007\000\002\007\007\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\006\007\000\002\006\007\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\012" +
    "\007\000\002\012\007\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\010\005\000\002\010\005\000\002\010\004" +
    "\000\002\003\005\000\002\003\003\000\002\003\004\000" +
    "\002\011\011\000\002\011\011\000\002\011\011\000\002" +
    "\011\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\011\000\002\011\004\000\002\011\004\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\006\000\002\024\006\000\002\024\003\000\002\024\004" +
    "\000\002\024\004\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\006\003\004\025\007\001\002\000\014\024" +
    "\u0122\025\u0126\026\u0124\040\u0123\050\u0125\001\002\000\004" +
    "\002\u0121\001\002\000\006\002\ufffe\024\u011d\001\002\000" +
    "\006\003\010\040\011\001\002\000\020\024\u011c\025\u010d" +
    "\026\u010b\040\u0109\050\u010c\051\u0108\052\u010a\001\002\000" +
    "\026\011\030\012\022\013\023\014\021\015\026\016\025" +
    "\017\027\020\024\056\u010f\057\u010e\001\002\000\006\024" +
    "\ufff5\026\ufff5\001\002\000\006\024\014\026\015\001\002" +
    "\000\006\003\016\040\017\001\002\000\006\002\ufff8\024" +
    "\ufff8\001\002\000\016\025\u010d\026\u010b\040\u0109\050\u010c" +
    "\051\u0108\052\u010a\001\002\000\022\011\030\012\022\013" +
    "\023\014\021\015\026\016\025\017\027\020\024\001\002" +
    "\000\006\024\ufff6\026\ufff6\001\002\000\004\040\320\001" +
    "\002\000\004\040\315\001\002\000\004\040\312\001\002" +
    "\000\004\040\262\001\002\000\004\040\217\001\002\000" +
    "\004\040\140\001\002\000\004\040\036\001\002\000\004" +
    "\040\031\001\002\000\004\050\032\001\002\000\004\040" +
    "\033\001\002\000\004\007\034\001\002\000\004\040\035" +
    "\001\002\000\006\024\ufff3\026\ufff3\001\002\000\004\050" +
    "\037\001\002\000\004\051\040\001\002\000\006\003\041" +
    "\025\042\001\002\000\010\024\135\025\137\026\136\001" +
    "\002\000\006\003\051\040\052\001\002\000\006\024\044" +
    "\052\045\001\002\000\004\025\046\001\002\000\006\024" +
    "\uffed\026\uffed\001\002\000\006\003\051\040\052\001\002" +
    "\000\006\024\127\026\130\001\002\000\006\024\uffcf\026" +
    "\uffcf\001\002\000\014\024\122\027\123\030\124\040\125" +
    "\050\126\001\002\000\006\027\053\030\054\001\002\000" +
    "\004\040\117\001\002\000\004\040\055\001\002\000\004" +
    "\050\056\001\002\000\020\003\066\004\064\021\060\040" +
    "\071\046\067\047\063\053\065\001\002\000\022\024\uff9c" +
    "\026\uff9c\040\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\054" +
    "\uff9c\001\002\000\022\024\uff95\026\uff95\040\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\054\uff95\001\002\000\022\024" +
    "\uff9f\026\uff9f\040\uff9f\042\uff9f\043\uff9f\044\114\045\113" +
    "\054\uff9f\001\002\000\012\024\uffca\026\uffca\042\075\043" +
    "\073\001\002\000\004\053\110\001\002\000\022\024\uff9b" +
    "\026\uff9b\040\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\054" +
    "\uff9b\001\002\000\020\003\066\004\064\021\060\040\071" +
    "\046\067\047\063\053\065\001\002\000\010\040\104\053" +
    "\103\054\105\001\002\000\004\053\100\001\002\000\022" +
    "\024\uff9a\026\uff9a\040\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\054\uff9a\001\002\000\020\003\066\004\064\021\060" +
    "\040\071\046\067\047\063\053\065\001\002\000\010\040" +
    "\074\042\075\043\073\001\002\000\020\003\066\004\064" +
    "\021\060\040\071\046\067\047\063\053\065\001\002\000" +
    "\022\024\uff98\026\uff98\040\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\054\uff98\001\002\000\020\003\066\004\064\021" +
    "\060\040\071\046\067\047\063\053\065\001\002\000\016" +
    "\024\uffa1\026\uffa1\040\uffa1\042\uffa1\043\073\054\uffa1\001" +
    "\002\000\016\024\uffa0\026\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\054\uffa0\001\002\000\020\003\066\004\064\021\060\040" +
    "\071\046\067\047\063\053\065\001\002\000\010\042\075" +
    "\043\073\054\102\001\002\000\022\024\uff97\026\uff97\040" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\054\uff97\001\002" +
    "\000\022\024\uff94\026\uff94\040\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\054\uff94\001\002\000\022\024\uff92\026\uff92" +
    "\040\uff92\042\uff92\043\uff92\044\uff92\045\uff92\054\uff92\001" +
    "\002\000\022\024\uff93\026\uff93\040\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\054\uff93\001\002\000\010\042\075\043" +
    "\073\054\107\001\002\000\022\024\uff99\026\uff99\040\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\054\uff99\001\002\000" +
    "\020\003\066\004\064\021\060\040\071\046\067\047\063" +
    "\053\065\001\002\000\010\042\075\043\073\054\112\001" +
    "\002\000\022\024\uff96\026\uff96\040\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\054\uff96\001\002\000\020\003\066\004" +
    "\064\021\060\040\071\046\067\047\063\053\065\001\002" +
    "\000\020\003\066\004\064\021\060\040\071\046\067\047" +
    "\063\053\065\001\002\000\022\024\uff9e\026\uff9e\040\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\113\054\uff9e\001\002\000" +
    "\022\024\uff9d\026\uff9d\040\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\054\uff9d\001\002\000\004\050\120\001\002\000" +
    "\020\003\066\004\064\021\060\040\071\046\067\047\063" +
    "\053\065\001\002\000\012\024\uffc9\026\uffc9\042\075\043" +
    "\073\001\002\000\006\024\uffce\026\uffce\001\002\000\006" +
    "\024\uffc5\026\uffc5\001\002\000\006\024\uffc6\026\uffc6\001" +
    "\002\000\006\024\uffc8\026\uffc8\001\002\000\006\024\uffc7" +
    "\026\uffc7\001\002\000\006\003\132\040\052\001\002\000" +
    "\006\024\uffd5\052\uffd5\001\002\000\006\024\uffd0\026\uffd0" +
    "\001\002\000\012\027\123\030\124\040\125\050\126\001" +
    "\002\000\006\024\127\026\134\001\002\000\006\024\uffd4" +
    "\052\uffd4\001\002\000\006\024\uffd1\052\uffd1\001\002\000" +
    "\006\024\uffd2\052\uffd2\001\002\000\006\024\uffd3\052\uffd3" +
    "\001\002\000\004\050\141\001\002\000\004\051\142\001" +
    "\002\000\006\003\144\025\145\001\002\000\006\024\212" +
    "\052\213\001\002\000\010\024\207\025\211\026\210\001" +
    "\002\000\006\003\147\040\150\001\002\000\006\024\uffdf" +
    "\026\uffdf\001\002\000\016\024\206\027\156\030\157\031" +
    "\162\040\160\050\161\001\002\000\010\027\163\030\164" +
    "\031\165\001\002\000\006\024\152\026\153\001\002\000" +
    "\006\003\155\040\150\001\002\000\006\024\uffe4\052\uffe4" +
    "\001\002\000\006\024\uffe0\026\uffe0\001\002\000\014\027" +
    "\156\030\157\031\162\040\160\050\161\001\002\000\006" +
    "\024\uffb2\026\uffb2\001\002\000\006\024\uffb3\026\uffb3\001" +
    "\002\000\006\024\uffb5\026\uffb5\001\002\000\006\024\uffb4" +
    "\026\uffb4\001\002\000\006\024\uffb1\026\uffb1\001\002\000" +
    "\004\040\203\001\002\000\004\040\200\001\002\000\004" +
    "\040\166\001\002\000\004\050\167\001\002\000\006\003" +
    "\170\040\172\001\002\000\004\040\177\001\002\000\006" +
    "\024\uffb6\026\uffb6\001\002\000\006\005\174\006\173\001" +
    "\002\000\004\040\176\001\002\000\004\040\175\001\002" +
    "\000\006\024\uffb0\026\uffb0\001\002\000\006\024\uffaf\026" +
    "\uffaf\001\002\000\006\024\uffae\026\uffae\001\002\000\004" +
    "\050\201\001\002\000\020\003\066\004\064\021\060\040" +
    "\071\046\067\047\063\053\065\001\002\000\012\024\uffb8" +
    "\026\uffb8\042\075\043\073\001\002\000\004\050\204\001" +
    "\002\000\020\003\066\004\064\021\060\040\071\046\067" +
    "\047\063\053\065\001\002\000\012\024\uffb7\026\uffb7\042" +
    "\075\043\073\001\002\000\006\024\uffde\026\uffde\001\002" +
    "\000\006\024\uffe1\052\uffe1\001\002\000\006\024\uffe2\052" +
    "\uffe2\001\002\000\006\024\uffe3\052\uffe3\001\002\000\004" +
    "\025\214\001\002\000\006\024\uffef\026\uffef\001\002\000" +
    "\006\003\147\040\150\001\002\000\006\024\152\026\216" +
    "\001\002\000\006\024\uffe5\052\uffe5\001\002\000\004\050" +
    "\220\001\002\000\004\051\221\001\002\000\006\003\223" +
    "\025\224\001\002\000\006\024\255\052\256\001\002\000" +
    "\010\024\252\025\254\026\253\001\002\000\006\003\225" +
    "\040\226\001\002\000\014\024\251\027\235\030\236\040" +
    "\237\050\240\001\002\000\006\027\241\030\242\001\002" +
    "\000\006\024\uffd7\026\uffd7\001\002\000\006\024\231\026" +
    "\232\001\002\000\006\003\233\040\226\001\002\000\006" +
    "\024\uffdc\052\uffdc\001\002\000\012\027\235\030\236\040" +
    "\237\050\240\001\002\000\006\024\uffd8\026\uffd8\001\002" +
    "\000\006\024\uffbf\026\uffbf\001\002\000\006\024\uffc0\026" +
    "\uffc0\001\002\000\006\024\uffc2\026\uffc2\001\002\000\006" +
    "\024\uffc1\026\uffc1\001\002\000\004\040\246\001\002\000" +
    "\004\040\243\001\002\000\004\050\244\001\002\000\020" +
    "\003\066\004\064\021\060\040\071\046\067\047\063\053" +
    "\065\001\002\000\012\024\uffc4\026\uffc4\042\075\043\073" +
    "\001\002\000\004\050\247\001\002\000\020\003\066\004" +
    "\064\021\060\040\071\046\067\047\063\053\065\001\002" +
    "\000\012\024\uffc3\026\uffc3\042\075\043\073\001\002\000" +
    "\006\024\uffd6\026\uffd6\001\002\000\006\024\uffd9\052\uffd9" +
    "\001\002\000\006\024\uffda\052\uffda\001\002\000\006\024" +
    "\uffdb\052\uffdb\001\002\000\004\025\257\001\002\000\006" +
    "\024\uffee\026\uffee\001\002\000\006\003\225\040\226\001" +
    "\002\000\006\024\231\026\261\001\002\000\006\024\uffdd" +
    "\052\uffdd\001\002\000\004\050\263\001\002\000\004\025" +
    "\264\001\002\000\006\003\266\040\267\001\002\000\006" +
    "\024\uffcc\026\uffcc\001\002\000\014\024\311\027\275\030" +
    "\276\040\277\050\300\001\002\000\006\027\301\030\302" +
    "\001\002\000\006\024\271\026\272\001\002\000\006\003" +
    "\274\040\267\001\002\000\006\024\uffec\026\uffec\001\002" +
    "\000\006\024\uffcd\026\uffcd\001\002\000\012\027\275\030" +
    "\276\040\277\050\300\001\002\000\006\024\uffb9\026\uffb9" +
    "\001\002\000\006\024\uffba\026\uffba\001\002\000\006\024" +
    "\uffbc\026\uffbc\001\002\000\006\024\uffbb\026\uffbb\001\002" +
    "\000\004\040\306\001\002\000\004\040\303\001\002\000" +
    "\004\050\304\001\002\000\020\003\066\004\064\021\060" +
    "\040\071\046\067\047\063\053\065\001\002\000\012\024" +
    "\uffbe\026\uffbe\042\075\043\073\001\002\000\004\050\307" +
    "\001\002\000\020\003\066\004\064\021\060\040\071\046" +
    "\067\047\063\053\065\001\002\000\012\024\uffbd\026\uffbd" +
    "\042\075\043\073\001\002\000\006\024\uffcb\026\uffcb\001" +
    "\002\000\004\050\313\001\002\000\020\003\066\004\064" +
    "\021\060\040\071\046\067\047\063\053\065\001\002\000" +
    "\012\024\ufff1\026\ufff1\042\075\043\073\001\002\000\004" +
    "\050\316\001\002\000\020\003\066\004\064\021\060\040" +
    "\071\046\067\047\063\053\065\001\002\000\012\024\ufff2" +
    "\026\ufff2\042\075\043\073\001\002\000\004\050\321\001" +
    "\002\000\004\025\322\001\002\000\006\003\324\040\325" +
    "\001\002\000\006\024\u0104\026\u0105\001\002\000\010\024" +
    "\u0101\040\u0102\050\u0103\001\002\000\020\022\332\032\331" +
    "\033\335\034\333\035\330\036\327\037\334\001\002\000" +
    "\006\024\uffac\026\uffac\001\002\000\004\040\374\001\002" +
    "\000\004\040\367\001\002\000\004\040\362\001\002\000" +
    "\004\040\355\001\002\000\004\040\350\001\002\000\004" +
    "\040\343\001\002\000\004\040\336\001\002\000\004\050" +
    "\337\001\002\000\004\040\340\001\002\000\004\041\341" +
    "\001\002\000\004\040\342\001\002\000\006\024\uffa9\026" +
    "\uffa9\001\002\000\004\050\344\001\002\000\004\040\345" +
    "\001\002\000\004\041\346\001\002\000\004\040\347\001" +
    "\002\000\006\024\uffa5\026\uffa5\001\002\000\004\050\351" +
    "\001\002\000\004\040\352\001\002\000\004\041\353\001" +
    "\002\000\004\040\354\001\002\000\006\024\uffa8\026\uffa8" +
    "\001\002\000\004\050\356\001\002\000\004\040\357\001" +
    "\002\000\004\041\360\001\002\000\004\040\361\001\002" +
    "\000\006\024\uffa4\026\uffa4\001\002\000\004\050\363\001" +
    "\002\000\004\040\364\001\002\000\004\041\365\001\002" +
    "\000\004\040\366\001\002\000\006\024\uffaa\026\uffaa\001" +
    "\002\000\004\050\370\001\002\000\004\040\371\001\002" +
    "\000\004\041\372\001\002\000\004\040\373\001\002\000" +
    "\006\024\uffa7\026\uffa7\001\002\000\004\050\375\001\002" +
    "\000\004\040\376\001\002\000\004\041\377\001\002\000" +
    "\004\040\u0100\001\002\000\006\024\uffa6\026\uffa6\001\002" +
    "\000\006\024\uffab\026\uffab\001\002\000\006\024\uffa3\026" +
    "\uffa3\001\002\000\006\024\uffa2\026\uffa2\001\002\000\006" +
    "\003\u0106\040\325\001\002\000\006\024\ufff0\026\ufff0\001" +
    "\002\000\006\040\u0102\050\u0103\001\002\000\006\024\uffad" +
    "\026\uffad\001\002\000\006\024\uffe9\026\uffe9\001\002\000" +
    "\006\024\uffeb\026\uffeb\001\002\000\006\024\uffe8\026\uffe8" +
    "\001\002\000\006\024\uffe6\026\uffe6\001\002\000\006\024" +
    "\uffea\026\uffea\001\002\000\006\024\uffe7\026\uffe7\001\002" +
    "\000\004\040\u0116\001\002\000\004\040\u0110\001\002\000" +
    "\004\050\u0111\001\002\000\004\040\u0112\001\002\000\004" +
    "\060\u0113\001\002\000\004\040\u0114\001\002\000\004\026" +
    "\u0115\001\002\000\004\002\000\001\002\000\004\050\u0117" +
    "\001\002\000\004\040\u0118\001\002\000\004\007\u0119\001" +
    "\002\000\004\040\u011a\001\002\000\004\026\u011b\001\002" +
    "\000\004\002\uffff\001\002\000\006\024\ufff4\026\ufff4\001" +
    "\002\000\004\025\u011e\001\002\000\006\003\010\040\017" +
    "\001\002\000\006\024\014\026\u0120\001\002\000\006\002" +
    "\ufff9\024\ufff9\001\002\000\004\002\001\001\002\000\006" +
    "\002\ufff7\024\ufff7\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0124\000\006\026\005\027\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\011" +
    "\025\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\042\001\001\000\002\001\001\000\006\007\047\017" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\047\017\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\061\022\060\023\056\024\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\105" +
    "\022\060\023\056\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\071\022\060" +
    "\023\056\024\067\001\001\000\002\001\001\000\012\021" +
    "\076\022\060\023\056\024\067\001\001\000\002\001\001" +
    "\000\012\021\075\022\060\023\056\024\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\100\022\060" +
    "\023\056\024\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\110\022" +
    "\060\023\056\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\115\023\056\024\067\001\001\000" +
    "\010\022\114\023\056\024\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\120\022" +
    "\060\023\056\024\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\145\013\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\201\022\060\023\056\024\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\021" +
    "\204\022\060\023\056\024\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\145\013\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\226\015\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\244\022\060\023\056\024\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\247" +
    "\022\060\023\056\024\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\226\015\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\267\012" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\304\022\060\023\056\024\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\307\022\060" +
    "\023\056\024\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\313\022\060\023\056" +
    "\024\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\316\022\060\023\056\024\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\322\011\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\011\025" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



                    public ParserJson(Lexer lexer){
                       super(lexer);
                   }
                   public Symbol scan() throws Exception {
                               Symbol symbol = this.getScanner().next_token();
                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               while(symbol != null && symbol.sym == ParserJsonSym.SYM) {
                                   this.report_expected_token_ids();
                                   System.out.println("Ingorando: " + symbol.value.toString());
                                   Token token = (Token) symbol.value;
                                   erroForClient.add(new ErrorModel(token.getLexeme(),token.getLine(),token.getColumn(), ErrorType.LEXICO,"No_existe_esta_cadena_en_el_lenguaje"));
                                   symbol = this.getScanner().next_token();
                               }

                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               return symbol;
                       }
                       public void syntax_error(Symbol cur_token) {
                               Token token = (Token) cur_token.value;

                               if (cur_token.sym ==ParserJsonSym.EOF) {
                       //          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "Simbolo_inesperado";
                                   erroForClient.add(new ErrorModel("Fin_del_archivo", token.getLine(),token.getColumn(), ErrorType.SINTACTICO,er));
                                   System.out.println(er);
                               } else {
                                   String er = "Simbolo_inesperado";
                                   erroForClient.add(new ErrorModel(token.getLexeme(), token.getLine(), token.getColumn(),ErrorType.SINTACTICO,er));
                                   System.out.println(er);
                               }
                           }

                           public void unrecovered_syntax_error(Symbol cur_token) {
                               if (cur_token.sym == ParserJsonSym.EOF) {
                                   Token tok = (Token) cur_token.value;
                                   String er = "No_se_puede_recuperar_el_error_ya_no_hay_mas_tokens";
                                   erroForClient.add(new ErrorModel("FIN_ARCHIVO", tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                  /* Converter.converObjectToXmlError(new Error(erroForClient));*/
                                   erroForClient=new ArrayList();
                                   System.out.println(er);
                               } else {
                                   Token tok = (Token) cur_token.value;
                                   //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "no_se_puede_recuperar_el_error";
                                   erroForClient.add(new ErrorModel(tok.getLexeme(), tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                  /* Converter.converObjectToXmlError(new Error(erroForClient));*/
                                    erroForClient=new ArrayList();
                                   System.out.println(er);
                               }
                           }
                                       /*public Symbol scan() throws Exception{
                                           Symbol sym= this.getScanner().next_token();
                                           if(sym == null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           while(sym != null && sym.sym== parse().SYM){
                                               this.report_expected_token_ids();
                                               System.out.println("ignorando : "+ sym.value.toString());
                                               sym= this.getScanner().next_token();
                                           }
                                           if(sym== null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           return sym;
                                       }*/

                   /*public void syntax_error(Symbol s){

                    converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                    new Response(Response_E.NOTHING);
                   }
                   public void unrecovered_syntax_error(Symbol s){
                   converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                   new Response(Response_E.NOTHING);
                   }*/
                   public static World worldSingleton;
                       public static World getSingletonInstanceWorld() {
                           if (worldSingleton == null){
                               worldSingleton = new World();
                           }
                           else{
                              /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                           }
                           return worldSingleton;
                       }

                        public static Board boardSingleton;
                               public static Board getSingletonInstanceBoard() {
                                   if (boardSingleton == null){
                                       boardSingleton = new Board();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                                   }
                                   return boardSingleton;
                               }
                         public static Box boxSingleton;
                               public static Box getSingletonInstanceBox() {
                                   if (boxSingleton == null){
                                       boxSingleton = new Box();
                                   }
                                   else{
                                      /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                                   }
                                       return boxSingleton;
                               }
                         public static Target targetSingleton;
                               public static Target getSingletonInstanceTarget() {
                                   if (targetSingleton == null){
                                       targetSingleton = new Target();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                                   }
                                   return targetSingleton;
                               }
                         public static Player playerSingleton;
                               public static Player getSingletonInstancePlayer() {
                                   if (playerSingleton == null){
                                       playerSingleton = new Player();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                                   }
                                   return playerSingleton;
                               }
                         public static ConfigWorld configSingleton;
                               public static ConfigWorld getSingletonInstanceConfig() {
                                   if (configSingleton == null){
                                       configSingleton = new ConfigWorld();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                                   }
                                   return configSingleton;
                               }
                          public static Response response;
                               public static Response getSingletonInstanceResponse() {
                                   if (response == null){
                                       response = new Response();
                                   }
                                   else{
                                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                                   }
                                   return response;}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJson$actions {
  private final ParserJson parser;

  /** Constructor */
  CUP$ParserJson$actions(ParserJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action_part00000000(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJson$result;

      /* select the action based on the action number */
        switch (CUP$ParserJson$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0 -> { // $START ::= inic EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int start_valright = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Response start_val = (Response) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = start_val;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$ParserJson$parser.done_parsing();
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1 -> { // inic ::= LLAVE_A COMILLA WORLDS COMILLA DOS_PUNTOS COMILLA ALL COMILLA LLAVE_C
                {
                    Response RESULT = null;
                    int aleft = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int aright = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Token a = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    RESULT = new Response(Response_E.REQUEST_ALL_WORLDS, null, null, null);
                    System.out.println("mandare todos los mundos");
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 8)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2 -> { // inic ::= LLAVE_A COMILLA WORLD COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA LLAVE_C
                {
                    Response RESULT = null;
                    int aleft = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int aright = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Token a = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    RESULT = new Response(Response_E.REQUEST_FOR_NAME, null, a.getLexeme(), null);
                    System.out.println("mandare el mundo pedido " + a.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 8)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3 -> { // inic ::= worldPro
                {
                    Response RESULT = null;
                    int aleft = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int aright = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    ArrayList<World> a = (ArrayList<World>) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    RESULT = new Response(Response_E.REQUEST_NEW_WORLD, a, null, null);
                    /*RESULT= new Response(Response_E.REQUEST_NEW_WORLD,a);*/

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4 -> { // inic ::= error LLAVE_A
                {
                    Response RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5 -> { // inic ::= error LLAVE_C
                {
                    Response RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6 -> { // inic ::= error DOS_PUNTOS
                {
                    Response RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7 -> { // inic ::= error COMILLA
                {
                    Response RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("inic", 21, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8 -> { // worldPro ::= worldPro COMA LLAVE_A atri LLAVE_C
                {
                    ArrayList<World> RESULT = null;
                    int n1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)).left;
                    int n1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)).right;
                    ArrayList<World> n1 = (ArrayList<World>) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)).value;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    World a1 = (World) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;

                    a1 = new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(), getSingletonInstanceWorld().getCols(), getSingletonInstanceWorld().getConfig(),
                            getSingletonInstanceWorld().getArrayBoard(), getSingletonInstanceWorld().getArrayBoxes(), getSingletonInstanceWorld().getArrayTarget(), getSingletonInstanceWorld().getPlayer());
                    n1.add(a1);
                    RESULT = n1;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro", 20, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9 -> { // worldPro ::= LLAVE_A atri LLAVE_C
                {
                    ArrayList<World> RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    World a1 = (World) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;

                    RESULT = new ArrayList<World>();
                    RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(), getSingletonInstanceWorld().getCols(), getSingletonInstanceWorld().getConfig(),
                            getSingletonInstanceWorld().getArrayBoard(), getSingletonInstanceWorld().getArrayBoxes(), getSingletonInstanceWorld().getArrayTarget(), getSingletonInstanceWorld().getPlayer()));

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro", 20, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10 -> { // worldPro ::= error COMA
                {
                    ArrayList<World> RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("worldPro", 20, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11 -> { // atri ::= atri COMA producWorld
                {
                    World RESULT = null;
                    RESULT = getSingletonInstanceWorld();
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri", 19, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12 -> { // atri ::= producWorld
                {
                    World RESULT = null;
                    RESULT = getSingletonInstanceWorld();
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri", 19, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13 -> { // atri ::= error COMA
                {
                    World RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("atri", 19, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14 -> { // producWorld ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceWorld().setName(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15 -> { // producWorld ::= COMILLA ROWS COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceWorld().setRows(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16 -> { // producWorld ::= COMILLA COLS COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceWorld().setCols(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17 -> { // producWorld ::= COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A config LLAVE_C
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(), getSingletonInstanceConfig().getBox_on_target_color(), getSingletonInstanceConfig().getTarget_color(),
                            getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18 -> { // producWorld ::= COMILLA BOARD COMILLA DOS_PUNTOS L_CORCHETE configBoardArray R_CORCHETE
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19 -> { // producWorld ::= COMILLA BOXES COMILLA DOS_PUNTOS L_CORCHETE configBoxArray R_CORCHETE
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20 -> { // producWorld ::= COMILLA TARGETS COMILLA DOS_PUNTOS L_CORCHETE configTargetArray R_CORCHETE
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21 -> { // producWorld ::= COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A configPlayer LLAVE_C
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(), getSingletonInstancePlayer().getPosY()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22 -> { // producWorld ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23 -> { // producWorld ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24 -> { // producWorld ::= error L_CORCHETE
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25 -> { // producWorld ::= error R_CORCHETE
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26 -> { // producWorld ::= error LLAVE_A
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27 -> { // producWorld ::= error LLAVE_C
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28 -> { // configBoardArray ::= configBoardArray COMA LLAVE_A configBoard LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(), getSingletonInstanceBoard().getPosY(), getSingletonInstanceBoard().getType()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray", 10, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29 -> { // configBoardArray ::= LLAVE_A configBoard LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(), getSingletonInstanceBoard().getPosY(), getSingletonInstanceBoard().getType()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray", 10, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30 -> { // configBoardArray ::= error LLAVE_A
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray", 10, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31 -> { // configBoardArray ::= error LLAVE_C
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray", 10, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32 -> { // configBoardArray ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoardArray", 10, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33 -> { // configBoard ::= configBoard COMA posTB
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard", 9, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34 -> { // configBoard ::= posTB
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard", 9, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35 -> { // configBoard ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoard", 9, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36 -> { // configBoxArray ::= configBoxArray COMA LLAVE_A configBox LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(), getSingletonInstanceBox().getPosY()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray", 12, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37 -> { // configBoxArray ::= LLAVE_A configBox LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(), getSingletonInstanceBox().getPosY()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray", 12, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38 -> { // configBoxArray ::= error LLAVE_A
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray", 12, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39 -> { // configBoxArray ::= error LLAVE_C
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray", 12, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40 -> { // configBoxArray ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBoxArray", 12, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41 -> { // configBox ::= configBox COMA posBox
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox", 11, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42 -> { // configBox ::= posBox
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox", 11, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43 -> { // configBox ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configBox", 11, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44 -> { // configTargetArray ::= configTargetArray COMA LLAVE_A configTarget LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(), getSingletonInstanceTarget().getPosY()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray", 14, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45 -> { // configTargetArray ::= LLAVE_A configTarget LLAVE_C
                {
                    Object RESULT = null;
                    getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(), getSingletonInstanceTarget().getPosY()));
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray", 14, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46 -> { // configTargetArray ::= error LLAVE_A
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray", 14, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47 -> { // configTargetArray ::= error LLAVE_C
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray", 14, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48 -> { // configTargetArray ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTargetArray", 14, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49 -> { // configTarget ::= configTarget COMA posT
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget", 13, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50 -> { // configTarget ::= posT
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget", 13, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51 -> { // configTarget ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configTarget", 13, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52 -> { // configPlayer ::= configPlayer COMA posPlayer
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer", 2, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53 -> { // configPlayer ::= posPlayer
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer", 2, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54 -> { // configPlayer ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPlayer", 2, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55 -> { // posT ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceTarget().setPosX(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56 -> { // posT ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceTarget().setPosY(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57 -> { // posT ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58 -> { // posT ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59 -> { // posT ::= error POS_X
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60 -> { // posT ::= error POS_Y
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posT", 5, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61 -> { // posBox ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceBox().setPosX(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62 -> { // posBox ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceBox().setPosY(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63 -> { // posBox ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64 -> { // posBox ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65 -> { // posBox ::= error POS_X
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66 -> { // posBox ::= error POS_Y
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67 -> { // posPlayer ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstancePlayer().setPosX(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68 -> { // posPlayer ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstancePlayer().setPosY(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69 -> { // posPlayer ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70 -> { // posPlayer ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71 -> { // posPlayer ::= error POS_X
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72 -> { // posPlayer ::= error POS_Y
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73 -> { // posTB ::= COMILLA POS_X COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceBoard().setPosX(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74 -> { // posTB ::= COMILLA POS_Y COMILLA DOS_PUNTOS operacion1
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceBoard().setPosY(a1.intValue());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75 -> { // posTB ::= COMILLA TYPE COMILLA DOS_PUNTOS typeH
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    getSingletonInstanceBoard().setType((Integer) a1);
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 4)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76 -> { // posTB ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77 -> { // posTB ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78 -> { // posTB ::= error POS_X
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79 -> { // posTB ::= error POS_Y
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80 -> { // posTB ::= error TYPE
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81 -> { // typeH ::= COMILLA HALL COMILLA
                {
                    Object RESULT = null;
                    int t1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int t1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token t1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = t1.getTokenType();
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH", 6, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82 -> { // typeH ::= COMILLA BRICK COMILLA
                {
                    Object RESULT = null;
                    int t1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int t1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token t1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = t1.getTokenType();
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH", 6, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83 -> { // typeH ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("typeH", 6, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84 -> { // config ::= config COMA configPro
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config", 1, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85 -> { // config ::= configPro
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Object a1 = (Object) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config", 1, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86 -> { // config ::= error COMA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("config", 1, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87 -> { // configPro ::= COMILLA BOX_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setBox_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88 -> { // configPro ::= COMILLA BOX_ON_TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89 -> { // configPro ::= COMILLA TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setTarget_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90 -> { // configPro ::= COMILLA BRICK_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setBrick_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91 -> { // configPro ::= COMILLA HALL_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setHall_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92 -> { // configPro ::= COMILLA UNDEFINED_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93 -> { // configPro ::= COMILLA PLAYER_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
                {
                    Object RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 6)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94 -> { // configPro ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95 -> { // configPro ::= error DOS_PUNTOS
                {
                    Object RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96 -> { // operacion1 ::= operacion1 SUMA operacion1
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    int a2left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a2right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a2 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1 + a2;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1", 15, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97 -> { // operacion1 ::= operacion1 RESTA operacion1
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    int a2left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a2right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a2 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1 - a2;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1", 15, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98 -> { // operacion1 ::= operacion2
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion1", 15, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99 -> { // operacion2 ::= operacion2 MULTIPLY operacion2
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    int pleft = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int pright = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token p = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    int a2left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a2right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a2 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1 * a2;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2", 16, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100 -> { // operacion2 ::= operacion2 DIVISION operacion2
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)).value;
                    int pleft = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int pright = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Token p = (Token) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    int a2left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a2right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a2 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;

                    if (a2 == 0) {
                        erroForClient.add(new ErrorModel("DIVISION", p.getLine(), p.getColumn(), ErrorType.SINTACTICO, "estas_diviendo_por_0_"));
                        RESULT = 1.0;
                    }
                    ;
                    RESULT = a1 / a2;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2", 16, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101 -> { // operacion2 ::= operacion3
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion2", 16, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102 -> { // operacion3 ::= ENTERO
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = Double.parseDouble(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3", 17, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103 -> { // operacion3 ::= operacion4
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion3", 17, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104 -> { // operacion4 ::= L_PARENT operacion1 R_PARENT
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105 -> { // operacion4 ::= COMILLA operacion1 COMILLA
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = a1;
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 2)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106 -> { // operacion4 ::= CEIL L_PARENT operacion1 R_PARENT
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = Math.ceil(a1);
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 3)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107 -> { // operacion4 ::= FLOOR L_PARENT operacion1 R_PARENT
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).right;
                    Double a1 = (Double) ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)).value;
                    RESULT = Math.floor(a1);
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 3)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108 -> { // operacion4 ::= DECIMAL
                {
                    Double RESULT = null;
                    int a1left = ((Symbol) CUP$ParserJson$stack.peek()).left;
                    int a1right = ((Symbol) CUP$ParserJson$stack.peek()).right;
                    Token a1 = (Token) ((Symbol) CUP$ParserJson$stack.peek()).value;
                    RESULT = Double.parseDouble(a1.getLexeme());
                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.peek()), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109 -> { // operacion4 ::= error L_PARENT
                {
                    Double RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110 -> { // operacion4 ::= error R_PARENT
                {
                    Double RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111 -> { // operacion4 ::= error COMILLA
                {
                    Double RESULT = null;

                    CUP$ParserJson$result = parser.getSymbolFactory().newSymbol("operacion4", 18, ((Symbol) CUP$ParserJson$stack.elementAt(CUP$ParserJson$top - 1)), ((Symbol) CUP$ParserJson$stack.peek()), RESULT);
                }
                return CUP$ParserJson$result;
            }

            /* . . . . . .*/
            default -> throw new Exception(
                    "Invalid action number " + CUP$ParserJson$act_num + "found in internal parse table");
        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJson$do_action(
    int                        CUP$ParserJson$act_num,
    java_cup.runtime.lr_parser CUP$ParserJson$parser,
    java.util.Stack            CUP$ParserJson$stack,
    int                        CUP$ParserJson$top)
    throws java.lang.Exception
    {
              return CUP$ParserJson$do_action_part00000000(
                               CUP$ParserJson$act_num,
                               CUP$ParserJson$parser,
                               CUP$ParserJson$stack,
                               CUP$ParserJson$top);
    }
}

}
