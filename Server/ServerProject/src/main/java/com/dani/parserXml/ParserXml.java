
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.parserXml;

import com.dani.Token;

import java.util.ArrayList;
import com.dani.objects.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserXml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserXmlSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserXml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserXml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserXml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\071\006\000\002\063" +
    "\021\000\002\070\006\000\002\070\005\000\002\067\004" +
    "\000\002\067\003\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\064" +
    "\004\000\002\064\003\000\002\065\004\000\002\065\003" +
    "\000\002\066\004\000\002\066\003\000\002\004\004\000" +
    "\002\004\003\000\002\007\005\000\002\007\005\000\002" +
    "\006\005\000\002\006\005\000\002\012\005\000\002\012" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\010\003\000\002\010\003\000\002\003\004\000" +
    "\002\003\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\013\005\000\002\014\006" +
    "\000\002\015\005\000\002\016\006\000\002\017\005\000" +
    "\002\020\006\000\002\021\005\000\002\022\006\000\002" +
    "\023\005\000\002\024\006\000\002\025\005\000\002\026" +
    "\006\000\002\027\005\000\002\030\006\000\002\031\005" +
    "\000\002\032\006\000\002\033\005\000\002\034\006\000" +
    "\002\035\005\000\002\036\006\000\002\037\005\000\002" +
    "\040\006\000\002\041\005\000\002\042\006\000\002\043" +
    "\005\000\002\044\006\000\002\045\005\000\002\046\006" +
    "\000\002\047\005\000\002\050\006\000\002\051\005\000" +
    "\002\052\006\000\002\053\005\000\002\054\006\000\002" +
    "\055\005\000\002\056\006\000\002\057\005\000\002\060" +
    "\006\000\002\061\005\000\002\062\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\044\006\001\002\000\004\044\026\001" +
    "\002\000\004\002\025\001\002\000\004\042\007\001\002" +
    "\000\004\041\010\001\002\000\004\010\011\001\002\000" +
    "\004\040\012\001\002\000\004\046\013\001\002\000\004" +
    "\011\014\001\002\000\004\046\015\001\002\000\004\012" +
    "\016\001\002\000\004\040\017\001\002\000\004\046\020" +
    "\001\002\000\004\011\021\001\002\000\004\046\022\001" +
    "\002\000\004\042\023\001\002\000\004\045\024\001\002" +
    "\000\004\044\uffff\001\002\000\004\002\001\001\002\000" +
    "\004\014\361\001\002\000\004\044\032\001\002\000\004" +
    "\044\353\001\002\000\004\044\037\001\002\000\004\015" +
    "\033\001\002\000\004\045\034\001\002\000\004\044\uffd4" +
    "\001\002\000\004\004\343\001\002\000\004\004\335\001" +
    "\002\000\022\016\252\017\247\020\244\021\250\022\243" +
    "\023\242\024\251\025\246\001\002\000\004\044\054\001" +
    "\002\000\004\044\271\001\002\000\004\044\237\001\002" +
    "\000\004\044\054\001\002\000\004\044\112\001\002\000" +
    "\004\044\ufffb\001\002\000\004\007\103\001\002\000\004" +
    "\044\054\001\002\000\004\004\075\001\002\000\004\044" +
    "\uffef\001\002\000\004\004\067\001\002\000\004\044\063" +
    "\001\002\000\006\026\055\027\056\001\002\000\004\045" +
    "\060\001\002\000\004\045\057\001\002\000\004\004\uffc2" +
    "\001\002\000\004\004\uffc0\001\002\000\004\044\ufff0\001" +
    "\002\000\004\044\ufff5\001\002\000\010\013\064\026\055" +
    "\027\056\001\002\000\004\023\065\001\002\000\004\045" +
    "\066\001\002\000\004\044\uffc7\001\002\000\004\044\071" +
    "\001\002\000\004\044\uffe8\001\002\000\004\013\072\001" +
    "\002\000\004\027\073\001\002\000\004\045\074\001\002" +
    "\000\004\044\uffc1\001\002\000\004\044\076\001\002\000" +
    "\004\013\100\001\002\000\004\044\uffe7\001\002\000\004" +
    "\026\101\001\002\000\004\045\102\001\002\000\004\044" +
    "\uffbf\001\002\000\004\044\105\001\002\000\004\044\ufffa" +
    "\001\002\000\004\013\106\001\002\000\004\016\107\001" +
    "\002\000\004\045\110\001\002\000\004\044\uffd1\001\002" +
    "\000\004\007\213\001\002\000\020\031\174\032\201\033" +
    "\177\034\173\035\172\036\200\037\176\001\002\000\004" +
    "\044\167\001\002\000\004\007\161\001\002\000\004\007" +
    "\153\001\002\000\004\007\145\001\002\000\004\007\137" +
    "\001\002\000\004\007\131\001\002\000\004\007\123\001" +
    "\002\000\004\044\uffde\001\002\000\004\044\125\001\002" +
    "\000\004\044\uffd9\001\002\000\004\013\126\001\002\000" +
    "\004\035\127\001\002\000\004\045\130\001\002\000\004" +
    "\044\uffb3\001\002\000\004\044\133\001\002\000\004\044" +
    "\uffd8\001\002\000\004\013\134\001\002\000\004\036\135" +
    "\001\002\000\004\045\136\001\002\000\004\044\uffb1\001" +
    "\002\000\004\044\141\001\002\000\004\044\uffd7\001\002" +
    "\000\004\013\142\001\002\000\004\037\143\001\002\000" +
    "\004\045\144\001\002\000\004\044\uffaf\001\002\000\004" +
    "\044\147\001\002\000\004\044\uffda\001\002\000\004\013" +
    "\150\001\002\000\004\034\151\001\002\000\004\045\152" +
    "\001\002\000\004\044\uffb5\001\002\000\004\044\155\001" +
    "\002\000\004\044\uffdd\001\002\000\004\013\156\001\002" +
    "\000\004\031\157\001\002\000\004\045\160\001\002\000" +
    "\004\044\uffbb\001\002\000\004\044\162\001\002\000\004" +
    "\013\164\001\002\000\004\044\uffdc\001\002\000\004\032" +
    "\165\001\002\000\004\045\166\001\002\000\004\044\uffb9" +
    "\001\002\000\022\013\175\031\174\032\201\033\177\034" +
    "\173\035\172\036\200\037\176\001\002\000\004\044\ufff7" +
    "\001\002\000\004\044\uffdf\001\002\000\004\045\212\001" +
    "\002\000\004\045\211\001\002\000\004\045\210\001\002" +
    "\000\004\021\206\001\002\000\004\045\205\001\002\000" +
    "\004\045\204\001\002\000\004\045\203\001\002\000\004" +
    "\045\202\001\002\000\004\007\uffba\001\002\000\004\007" +
    "\uffb2\001\002\000\004\007\uffb8\001\002\000\004\007\uffb0" +
    "\001\002\000\004\045\207\001\002\000\004\044\uffcb\001" +
    "\002\000\004\007\uffbc\001\002\000\004\007\uffb6\001\002" +
    "\000\004\007\uffb4\001\002\000\004\044\214\001\002\000" +
    "\004\013\216\001\002\000\004\044\uffdb\001\002\000\004" +
    "\033\217\001\002\000\004\045\220\001\002\000\004\044" +
    "\uffb7\001\002\000\004\044\233\001\002\000\004\004\227" +
    "\001\002\000\004\044\uffed\001\002\000\004\004\225\001" +
    "\002\000\004\044\071\001\002\000\004\044\uffea\001\002" +
    "\000\004\044\076\001\002\000\004\044\uffe9\001\002\000" +
    "\004\044\uffee\001\002\000\004\044\ufff4\001\002\000\010" +
    "\013\234\026\055\027\056\001\002\000\004\024\235\001" +
    "\002\000\004\045\236\001\002\000\004\044\uffc5\001\002" +
    "\000\024\013\245\016\252\017\247\020\244\021\250\022" +
    "\243\023\242\024\251\025\246\001\002\000\004\044\ufffc" +
    "\001\002\000\004\044\ufffd\001\002\000\004\045\264\001" +
    "\002\000\004\045\263\001\002\000\004\045\262\001\002" +
    "\000\004\015\260\001\002\000\004\045\257\001\002\000" +
    "\004\045\256\001\002\000\004\045\255\001\002\000\004" +
    "\045\254\001\002\000\004\045\253\001\002\000\004\007" +
    "\uffd2\001\002\000\004\044\uffc6\001\002\000\004\044\uffcc" +
    "\001\002\000\004\004\uffd0\001\002\000\004\044\uffc4\001" +
    "\002\000\004\045\261\001\002\000\004\044\uffd3\001\002" +
    "\000\004\004\uffce\001\002\000\004\044\uffca\001\002\000" +
    "\004\044\uffc8\001\002\000\004\004\315\001\002\000\004" +
    "\044\ufff1\001\002\000\004\004\313\001\002\000\004\044" +
    "\306\001\002\000\010\026\055\027\056\030\303\001\002" +
    "\000\006\005\275\006\274\001\002\000\004\044\277\001" +
    "\002\000\004\044\uffe0\001\002\000\004\044\uffe1\001\002" +
    "\000\004\044\uffe2\001\002\000\004\013\300\001\002\000" +
    "\004\030\301\001\002\000\004\045\302\001\002\000\004" +
    "\044\uffbd\001\002\000\004\045\304\001\002\000\006\005" +
    "\uffbe\006\uffbe\001\002\000\004\044\ufff2\001\002\000\012" +
    "\013\310\026\055\027\056\030\303\001\002\000\004\044" +
    "\ufff6\001\002\000\004\022\311\001\002\000\004\045\312" +
    "\001\002\000\004\044\uffc9\001\002\000\004\044\071\001" +
    "\002\000\004\044\uffe4\001\002\000\004\044\076\001\002" +
    "\000\004\044\uffe3\001\002\000\004\044\uffeb\001\002\000" +
    "\004\004\333\001\002\000\004\004\331\001\002\000\004" +
    "\044\325\001\002\000\004\044\uffec\001\002\000\004\044" +
    "\ufff3\001\002\000\010\013\326\026\055\027\056\001\002" +
    "\000\004\025\327\001\002\000\004\045\330\001\002\000" +
    "\004\044\uffc3\001\002\000\004\044\071\001\002\000\004" +
    "\044\uffe6\001\002\000\004\044\076\001\002\000\004\044" +
    "\uffe5\001\002\000\004\044\337\001\002\000\004\044\ufff9" +
    "\001\002\000\004\013\340\001\002\000\004\017\341\001" +
    "\002\000\004\045\342\001\002\000\004\044\uffcf\001\002" +
    "\000\004\044\345\001\002\000\004\044\ufff8\001\002\000" +
    "\004\013\346\001\002\000\004\020\347\001\002\000\004" +
    "\045\350\001\002\000\004\044\uffcd\001\002\000\004\044" +
    "\037\001\002\000\004\002\000\001\002\000\006\013\354" +
    "\015\033\001\002\000\004\014\355\001\002\000\004\045" +
    "\356\001\002\000\004\002\uffd5\001\002\000\004\044\237" +
    "\001\002\000\004\044\ufffe\001\002\000\004\045\362\001" +
    "\002\000\004\044\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\006\063\003\071\004\001\001\000\004\013" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\030\070\027\001\001\000\006\014\351\015\350\001\001" +
    "\000\026\002\044\017\045\021\035\023\034\025\043\027" +
    "\040\031\046\033\042\035\037\067\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\321" +
    "\012\316\037\320\041\317\001\001\000\014\005\265\037" +
    "\266\041\264\043\271\064\267\001\001\000\026\002\237" +
    "\016\240\017\045\021\035\023\034\025\043\027\040\031" +
    "\046\033\042\035\037\001\001\000\012\007\222\037\223" +
    "\041\221\066\220\001\001\000\024\003\112\011\121\045" +
    "\114\047\113\051\110\053\115\055\120\057\117\061\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\050\037\051\041\047\065\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\060\032" +
    "\061\037\051\041\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\170\026\167" +
    "\045\114\047\113\051\110\053\115\055\120\057\117\061" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\230\034\231" +
    "\037\223\041\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\225\001\001\000\002" +
    "\001\001\000\004\042\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\304\030\306\037" +
    "\266\041\264\043\271\001\001\000\002\001\001\000\004" +
    "\010\272\001\001\000\004\044\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\313\001\001\000\002" +
    "\001\001\000\004\042\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\322\036\323\037\320\041\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\331\001" +
    "\001\000\002\001\001\000\004\042\333\001\001\000\002" +
    "\001\001\000\004\022\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\044\017\045\021\035\023\034\025" +
    "\043\027\040\031\046\033\042\035\037\067\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\237\016\357" +
    "\017\045\021\035\023\034\025\043\027\040\031\046\033" +
    "\042\035\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserXml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserXml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserXml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*public ParserXml(LexXml lexer){
        super(lexer);
    }*/
    public static World worldSingleton;
        public static World getSingletonInstanceWorld() {
            if (worldSingleton == null){
                worldSingleton = new World();
            }
            else{
               /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
            }
            return worldSingleton;
        }

         public static Board boardSingleton;
                public static Board getSingletonInstanceBoard() {
                    if (boardSingleton == null){
                        boardSingleton = new Board();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                    }
                    return boardSingleton;
                }
          public static Box boxSingleton;
                public static Box getSingletonInstanceBox() {
                    if (boxSingleton == null){
                        boxSingleton = new Box();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                    }
                        return boxSingleton;
                }
          public static Target targetSingleton;
                public static Target getSingletonInstanceTarget() {
                    if (targetSingleton == null){
                        targetSingleton = new Target();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                    }
                    return targetSingleton;
                }
          public static Player playerSingleton;
                public static Player getSingletonInstancePlayer() {
                    if (playerSingleton == null){
                        playerSingleton = new Player();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                    }
                    return playerSingleton;
                }
          public static ConfigWorld configSingleton;
                public static ConfigWorld getSingletonInstanceConfig() {
                    if (configSingleton == null){
                        configSingleton = new ConfigWorld();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                    }
                    return configSingleton;
                }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserXml$actions {
  private final ParserXml parser;

  /** Constructor */
  CUP$ParserXml$actions(ParserXml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action_part00000000(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserXml$result;

      /* select the action based on the action number */
        switch (CUP$ParserXml$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0 -> { // $START ::= inic EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    ArrayList<World> start_val = (ArrayList<World>) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    RESULT = start_val;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$ParserXml$parser.done_parsing();
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1 -> { // inic ::= enco worldsA worldPro worldsC
                {
                    ArrayList<World> RESULT = null;
                    int aleft = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int aright = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    ArrayList<World> a = (ArrayList<World>) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;

                    RESULT = a;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("inic", 55, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2 -> { // enco ::= SIGNO_A INTERROGACION XML VERSION SIG_IGUAL SIG_COMILLAS LITERAL SIG_COMILLAS ENCODING SIG_IGUAL SIG_COMILLAS LITERAL SIG_COMILLAS INTERROGACION SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("enco", 49, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 14)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3 -> { // worldPro ::= worldPro worldA atri worldC
                {
                    ArrayList<World> RESULT = null;
                    int n1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)).left;
                    int n1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)).right;
                    ArrayList<World> n1 = (ArrayList<World>) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)).value;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    World a1 = (World) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;

                    a1 = new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(), getSingletonInstanceWorld().getCols(), getSingletonInstanceWorld().getConfig(),
                            getSingletonInstanceWorld().getArrayBoard(), getSingletonInstanceWorld().getArrayBoxes(), getSingletonInstanceWorld().getArrayTarget(), getSingletonInstanceWorld().getPlayer());
                    n1.add(a1);
                    RESULT = n1;
                    getSingletonInstanceWorld().clean();

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro", 54, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4 -> { // worldPro ::= worldA atri worldC
                {
                    ArrayList<World> RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    World a1 = (World) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;

                    RESULT = new ArrayList<World>();
                    RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(), getSingletonInstanceWorld().getCols(), getSingletonInstanceWorld().getConfig(),
                            getSingletonInstanceWorld().getArrayBoard(), getSingletonInstanceWorld().getArrayBoxes(), getSingletonInstanceWorld().getArrayTarget(), getSingletonInstanceWorld().getPlayer()));
                    getSingletonInstanceWorld().clean();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro", 54, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5 -> { // atri ::= atri producWorld
                {
                    World RESULT = null;
                    RESULT = getSingletonInstanceWorld();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri", 53, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6 -> { // atri ::= producWorld
                {
                    World RESULT = null;
                    RESULT = getSingletonInstanceWorld();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri", 53, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7 -> { // producWorld ::= nameA PALABRA nameC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().setName(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8 -> { // producWorld ::= rowsA ENTERO rowsC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().setRows(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9 -> { // producWorld ::= colsA ENTERO colsC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().setCols(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10 -> { // producWorld ::= configA config configC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(), getSingletonInstanceConfig().getBox_on_target_color(), getSingletonInstanceConfig().getTarget_color(),
                            getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11 -> { // producWorld ::= boardA configBoard boardC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(), getSingletonInstanceBoard().getPosY(), getSingletonInstanceBoard().getType()));
                    getSingletonInstanceBoard().clean();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12 -> { // producWorld ::= boxA configBox boxC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(), getSingletonInstanceBox().getPosY()));
                    getSingletonInstanceBox().clean();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13 -> { // producWorld ::= targetA configTarget targetC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(), getSingletonInstanceTarget().getPosY()));
                    getSingletonInstanceTarget().clean();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14 -> { // producWorld ::= playerA configPlayer playerC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(), getSingletonInstancePlayer().getPosY()));
                    getSingletonInstancePlayer().clean();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld", 0, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15 -> { // configBoard ::= configBoard posTB
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard", 50, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16 -> { // configBoard ::= posTB
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard", 50, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17 -> { // configBox ::= configBox posBox
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox", 51, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18 -> { // configBox ::= posBox
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox", 51, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19 -> { // configTarget ::= configTarget posT
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget", 52, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20 -> { // configTarget ::= posT
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget", 52, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21 -> { // configPlayer ::= configPlayer posPlayer
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer", 2, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22 -> { // configPlayer ::= posPlayer
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer", 2, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23 -> { // posT ::= posX_A ENTERO posX_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceTarget().setPosX(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT", 5, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24 -> { // posT ::= posY_A ENTERO posY_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceTarget().setPosY(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT", 5, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25 -> { // posBox ::= posX_A ENTERO posX_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceBox().setPosX(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26 -> { // posBox ::= posY_A ENTERO posY_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceBox().setPosY(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox", 4, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27 -> { // posPlayer ::= posX_A ENTERO posX_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstancePlayer().setPosX(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28 -> { // posPlayer ::= posY_A ENTERO posY_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstancePlayer().setPosY(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer", 8, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29 -> { // posTB ::= posX_A ENTERO posX_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceBoard().setPosX(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30 -> { // posTB ::= posY_A ENTERO posY_C
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceBoard().setPosY(Integer.parseInt(a1.getLexeme()));
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31 -> { // posTB ::= typeA typeH typeC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceBoard().setType((Integer) a1);
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB", 3, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32 -> { // typeH ::= HALL
                {
                    Object RESULT = null;
                    int t1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int t1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Token t1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = t1.getTokenType();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH", 6, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33 -> { // typeH ::= BRICK
                {
                    Object RESULT = null;
                    int t1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int t1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Token t1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = t1.getTokenType();
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH", 6, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34 -> { // config ::= config configPro
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config", 1, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35 -> { // config ::= configPro
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).right;
                    Object a1 = (Object) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
                    RESULT = a1;
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config", 1, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36 -> { // configPro ::= box_colorA PALABRA box_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setBox_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37 -> { // configPro ::= box_on_target_colorA PALABRA box_on_target_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38 -> { // configPro ::= target_colorA PALABRA target_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setTarget_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39 -> { // configPro ::= brick_colorA PALABRA brick_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setBrick_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40 -> { // configPro ::= hall_colorA PALABRA hall_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setHall_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41 -> { // configPro ::= undefined_colorA PALABRA undefined_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42 -> { // configPro ::= player_colorA PALABRA player_colorC
                {
                    Object RESULT = null;
                    int a1left = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).left;
                    int a1right = ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).right;
                    Token a1 = (Token) ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 1)).value;
                    getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());
                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro", 7, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43 -> { // worldsA ::= SIGNO_A WORLDS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsA", 9, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44 -> { // worldsC ::= SIGNO_A DIVISION WORLDS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsC", 10, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45 -> { // worldA ::= SIGNO_A WORLD SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldA", 11, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46 -> { // worldC ::= SIGNO_A DIVISION WORLD SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldC", 12, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47 -> { // nameA ::= SIGNO_A NAME SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameA", 13, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48 -> { // nameC ::= SIGNO_A DIVISION NAME SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameC", 14, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49 -> { // rowsA ::= SIGNO_A ROWS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsA", 15, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50 -> { // rowsC ::= SIGNO_A DIVISION ROWS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsC", 16, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51 -> { // colsA ::= SIGNO_A COLS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsA", 17, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52 -> { // colsC ::= SIGNO_A DIVISION COLS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsC", 18, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53 -> { // configA ::= SIGNO_A CONFIG SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configA", 19, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54 -> { // configC ::= SIGNO_A DIVISION CONFIG SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configC", 20, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55 -> { // boardA ::= SIGNO_A BOARD SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardA", 21, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56 -> { // boardC ::= SIGNO_A DIVISION BOARD SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardC", 22, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57 -> { // boxA ::= SIGNO_A BOXES SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxA", 23, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58 -> { // boxC ::= SIGNO_A DIVISION BOXES SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxC", 24, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59 -> { // targetA ::= SIGNO_A TARGETS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetA", 25, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60 -> { // targetC ::= SIGNO_A DIVISION TARGETS SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetC", 26, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61 -> { // playerA ::= SIGNO_A PLAYER SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerA", 27, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62 -> { // playerC ::= SIGNO_A DIVISION PLAYER SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerC", 28, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63 -> { // posX_A ::= SIGNO_A POS_X SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_A", 29, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64 -> { // posX_C ::= SIGNO_A DIVISION POS_X SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_C", 30, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65 -> { // posY_A ::= SIGNO_A POS_Y SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_A", 31, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66 -> { // posY_C ::= SIGNO_A DIVISION POS_Y SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_C", 32, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67 -> { // typeA ::= SIGNO_A TYPE SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeA", 33, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68 -> { // typeC ::= SIGNO_A DIVISION TYPE SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeC", 34, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69 -> { // box_colorA ::= SIGNO_A BOX_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorA", 35, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70 -> { // box_colorC ::= SIGNO_A DIVISION BOX_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorC", 36, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71 -> { // box_on_target_colorA ::= SIGNO_A BOX_ON_TARGET_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorA", 37, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72 -> { // box_on_target_colorC ::= SIGNO_A DIVISION BOX_ON_TARGET_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorC", 38, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73 -> { // target_colorA ::= SIGNO_A TARGET_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorA", 39, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74 -> { // target_colorC ::= SIGNO_A DIVISION TARGET_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorC", 40, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75 -> { // brick_colorA ::= SIGNO_A BRICK_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorA", 41, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76 -> { // brick_colorC ::= SIGNO_A DIVISION BRICK_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorC", 42, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77 -> { // hall_colorA ::= SIGNO_A HALL_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorA", 43, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78 -> { // hall_colorC ::= SIGNO_A DIVISION HALL_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorC", 44, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79 -> { // undefined_colorA ::= SIGNO_A UNDEFINED_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorA", 45, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80 -> { // undefined_colorC ::= SIGNO_A DIVISION UNDEFINED_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorC", 46, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81 -> { // player_colorA ::= SIGNO_A PLAYER_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorA", 47, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 2)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82 -> { // player_colorC ::= SIGNO_A DIVISION PLAYER_COLOR SIGNO_C
                {
                    Object RESULT = null;

                    CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorC", 48, ((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top - 3)), ((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()), RESULT);
                }
                return CUP$ParserXml$result;
            }

            /* . . . . . .*/
            default -> throw new Exception(
                    "Invalid action number " + CUP$ParserXml$act_num + "found in internal parse table");
        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
              return CUP$ParserXml$do_action_part00000000(
                               CUP$ParserXml$act_num,
                               CUP$ParserXml$parser,
                               CUP$ParserXml$stack,
                               CUP$ParserXml$top);
    }
}

}
