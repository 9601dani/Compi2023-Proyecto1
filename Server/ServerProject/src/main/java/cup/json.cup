package com.dani;
import java_cup.runtime.*;
import com.dani.objects.*;
import java.util.ArrayList;
import com.dani.models.Error.*;
class ParserJson;

parser code {:
                    public ParserJson(Lexer lexer){
                       super(lexer);
                   }
                   public Symbol scan() throws Exception {
                               Symbol symbol = this.getScanner().next_token();
                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               while(symbol != null && symbol.sym == ParserJsonSym.SYM) {
                                   this.report_expected_token_ids();
                                  /* System.out.println("Ingorando: " + symbol.value.toString());*/
                                   Token token = (Token) symbol.value;
                                   erroForClient.add(new ErrorModel(token.getLexeme(),token.getLine(),token.getColumn(), ErrorType.LEXICO,"No_existe_esta_cadena_en_el_lenguaje"));
                                   symbol = this.getScanner().next_token();
                               }

                               if (symbol == null) {
                                   return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                               }

                               return symbol;
                       }
                       public void syntax_error(Symbol cur_token) {
                               Token token = (Token) cur_token.value;

                               if (cur_token.sym ==ParserJsonSym.EOF) {
                       //          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "Simbolo_inesperado";
                                   erroForClient.add(new ErrorModel("Fin_del_archivo", token.getLine(),token.getColumn(), ErrorType.SINTACTICO,er));
                                /*   System.out.println(er);*/
                               } else {
                                   String er = "Simbolo_inesperado";
                                   erroForClient.add(new ErrorModel(token.getLexeme(), token.getLine(), token.getColumn(),ErrorType.SINTACTICO,er));
                                   /*System.out.println(er);*/
                               }
                           }

                           public void unrecovered_syntax_error(Symbol cur_token) {
                               if (cur_token.sym == ParserJsonSym.EOF) {
                                   Token tok = (Token) cur_token.value;
                                   String er = "No_se_puede_recuperar_el_error_ya_no_hay_mas_tokens";
                                   erroForClient.add(new ErrorModel("FIN_ARCHIVO", tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                   Converter.converObjectToXmlError(new Error(erroForClient));
                                   erroForClient=new ArrayList();
                                  /* System.out.println(er);*/
                               } else {
                                   Token tok = (Token) cur_token.value;
                                   //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
                                   String er = "no_se_puede_recuperar_el_error";
                                   erroForClient.add(new ErrorModel(tok.getLexeme(), tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
                                   Converter.converObjectToXmlError(new Error(erroForClient));
                                    erroForClient=new ArrayList();
                                  /* System.out.println(er);*/
                               }
                           }
                                       /*public Symbol scan() throws Exception{
                                           Symbol sym= this.getScanner().next_token();
                                           if(sym == null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           while(sym != null && sym.sym== parse().SYM){
                                               this.report_expected_token_ids();
                                               System.out.println("ignorando : "+ sym.value.toString());
                                               sym= this.getScanner().next_token();
                                           }
                                           if(sym== null){
                                               return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
                                           }
                                           return sym;
                                       }*/

                   /*public void syntax_error(Symbol s){

                    converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                    new Response(Response_E.NOTHING);
                   }
                   public void unrecovered_syntax_error(Symbol s){
                   converObjectToXmlError(new Error(new ErrorModel(s.value.toString(),s.right+1,s.left+1,"SINTACTICO","SE ESPERABA "+expected_token_ids())));
                   new Response(Response_E.NOTHING);
                   }*/
                   public static World worldSingleton;
                       public static World getSingletonInstanceWorld() {
                           if (worldSingleton == null){
                               worldSingleton = new World();
                           }
                           else{
                              /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                           }
                           return worldSingleton;
                       }

                        public static Board boardSingleton;
                               public static Board getSingletonInstanceBoard() {
                                   if (boardSingleton == null){
                                       boardSingleton = new Board();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                                   }
                                   return boardSingleton;
                               }
                         public static Box boxSingleton;
                               public static Box getSingletonInstanceBox() {
                                   if (boxSingleton == null){
                                       boxSingleton = new Box();
                                   }
                                   else{
                                      /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                                   }
                                       return boxSingleton;
                               }
                         public static Target targetSingleton;
                               public static Target getSingletonInstanceTarget() {
                                   if (targetSingleton == null){
                                       targetSingleton = new Target();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                                   }
                                   return targetSingleton;
                               }
                         public static Player playerSingleton;
                               public static Player getSingletonInstancePlayer() {
                                   if (playerSingleton == null){
                                       playerSingleton = new Player();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                                   }
                                   return playerSingleton;
                               }
                         public static ConfigWorld configSingleton;
                               public static ConfigWorld getSingletonInstanceConfig() {
                                   if (configSingleton == null){
                                       configSingleton = new ConfigWorld();
                                   }
                                   else{
                                       /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                                   }
                                   return configSingleton;
                               }
                          public static Response response;
                               public static Response getSingletonInstanceResponse() {
                                   if (response == null){
                                       response = new Response();
                                   }
                                   else{
                                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
                                   }
                                   return response;}:}

/* gramatica txt
inic ::= worldPro:a
                       {:
                          RESULT=a;
                       :};

   worldPro ::=  worldPro:n1 COMA Llave_A atri:a1 Llave_C
                   {:
                   a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                                  getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer());
                   n1.add(a1);
                   RESULT=n1;
                   :}
               | Llave_A atri:a1 Llave_C {:
                RESULT= new ArrayList<World>();
                RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                        getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer()));
                                                                                                     :};
   atri ::= atri COMA producWorld  {:RESULT= getSingletonInstanceWorld(); :}
           | producWorld  {:RESULT= getSingletonInstanceWorld(); :};

   producWorld ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA  {: getSingletonInstanceWorld().setName(a1.getLexeme());:}
                   | COMILLA ROWS COMILLA DOS_PUNTOS COMILLA operacion:a1 COMILLA  {: getSingletonInstanceWorld().setRows(Integer.parseInt(a1.getLexeme())); :}
                   | COMILLA COLS COMILLA DOS_PUNTOS COMILLA operacion:a1 COMILLA  {: getSingletonInstanceWorld().setCols(Integer.parseInt(a1.getLexeme())); :}
                   | COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A config:a LLAVE_C   {: getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),getSingletonInstanceConfig().getTarget_color(),
                                                        getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));  :}
                   | COMILLA BOARD COMILLA DOS PUNTOS L_CORCHETE configBoard R_CORCHETE    {: getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType()));  :}
                   | boxA configBox:a1 boxC          {: getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY()));  :}
                   | targetA configTarget:a1 targetC {: getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); :}
                   | playerA configPlayer:a1 playerC    {: getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY())); :};

   configBoard ::= configBoard COMA LLAVE_A posTB:a1 LLAVE_C {: RESULT=a1; :}
                   | LLAVE_A posTB:a1 LLAVE_C {: RESULT=a1; :};

   configBox ::= configBox COMA LLAVE_A posBox:a1 LLAVE_C{: RESULT=a1; :}
                 | LLAVE_A posBox:a1 LLAVE_C
   {: RESULT=a1; :}
   ;
   configTarget ::= configTarget COMA LLAVE_A posT:a1 LLAVE_C {: RESULT=a1; :}
                   | LLAVE_A posT:a1 LLAVE_C
   {: RESULT=a1; :}
   ;
   configPlayer ::= configPlayer COMA LLAVE_A posPlayer:a1 LLAVE_C {: RESULT=a1; :}
                   | LLAVE_A posPlayer:a1 LLAVE_C
   {: RESULT=a1;:}
   ;
   posT ::=  posX_A operacion:a1 posX_C
   {: getSingletonInstanceTarget().setPosX(Integer.parseInt(a1.getLexeme())); :}

           | posY_A operacion:a1 posY_C
   {: getSingletonInstanceTarget().setPosY(Integer.parseInt(a1.getLexeme())); :}
   ;


   posBox ::=  posX_A operacion:a1 posX_C
    {: getSingletonInstanceBox().setPosX(Integer.parseInt(a1.getLexeme())); :}

           | posY_A operacion:a1 posY_C
    {:   getSingletonInstanceBox().setPosY(Integer.parseInt(a1.getLexeme())); :}
   ;

   posPlayer ::=  posX_A operacion:a1 posX_C
   {: getSingletonInstancePlayer().setPosX( Integer.parseInt(a1.getLexeme())); :}

           | posY_A operacion:a1 posY_C
   {:   getSingletonInstancePlayer().setPosY(Integer.parseInt(a1.getLexeme())); :}
   ;

   posTB ::=  posX_A operacion:a1 posX_C
   {:  getSingletonInstanceBoard().setPosX(Integer.parseInt(a1.getLexeme())); :}

            | posY_A operacion:a1 posY_C
   {:  getSingletonInstanceBoard().setPosY(Integer.parseInt(a1.getLexeme())); :}

            | typeA typeH:a1 typeC
   {:  getSingletonInstanceBoard().setType((Integer)a1); :}
   ;

   typeH ::= HALL:t1
    {: RESULT= t1.getTokenType() ;:}

            | BRICK:t1
   {: RESULT=t1.getTokenType() ;:}
   ;
   config ::= config COMA configPro
              | configPro:a1 {: RESULT=a1;:};
   configPro ::= COMILLA BOX_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
    {:  getSingletonInstanceConfig().setBox_color(a1.getLexeme());  :}

                 | COMILLA BOX_ON_TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());  :}

                 | COMILLA TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setTarget_color(a1.getLexeme());  :}

                 | COMILLA BRICK_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setBrick_color(a1.getLexeme());  :}

                 | COMILLA HALL_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setHall_color(a1.getLexeme());  :}

                 | COMILLA UNDEFINED_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());  :}

                 | COMILLA PLAYER_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR COMILLA
   {:  getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());  :}

   operacion ::= ENTERO
                 | COMILLA operacion5:a1 COMILLA

   operacion5 ::= L_PARENT operacion1:a1 R_PARENT
                  | operacion1:a

   operacion1 ::= operacion1:a1 SUMA operacion1:a2 {:RESULT = a1 + a2 ; :}
               | operacion1:a1 RESTA operacion1:a2 {:RESULT = a1 - a2 ; :}
               | operacion2:a1 {:RESULT = a1 ; :};
   operacion2 ::= operacion2:a1 MULTIPLY operacion2:a2 {:RESULT = a1 * a2 ; :}
                | operacion2:a1 DIVISION operacion2:a2 {:RESULT = a1 / a2 ; :}
                | operacion3:a1 {:RESULT = a1 ; :} ;
   operacion3 ::= NUM:a1 {:RESULT = Double.parseDouble(a1.getLexeme()); :}
                  | operacion4:a1 {:RESULT =a1;:};
   operacion4 ::= L_PARENT operacion1:a1 R_PARENT {:RESULT =a1;:}
                  | CEIL L_PARENT operacion1:a1  R_PARENT {:RESULT = Math.ceil(a1);:}
                  | FLOOR L_PARENT operacion1:a1 R_PARENT {:RESULT = Math.floor(a1);:}
                  | DECIMAL:a1 {: RESULT = Double.parseDouble(a1.getLexeme()); :}; */
terminal Token    ENTERO,HALL,BRICK,PALABRA,LITERAL,NAME,ROWS,COLS,CONFIG,BOARD,BOXES,TARGETS,PLAYER,DECIMAL,PLAYER_COLOR,ERROR,COMA,LLAVE_A,LLAVE_C,
                  POS_Y,POS_X, TYPE, BOX_COLOR, BOX_ON_TARGET_COLOR,TARGET_COLOR,BRICK_COLOR,HALL_COLOR,UNDEFINED_COLOR,COMILLA,PALABRA_COLOR,
                  SUMA,RESTA,MULTIPLY,DIVISION,CEIL,FLOOR,DOS_PUNTOS,L_CORCHETE,R_CORCHETE, L_PARENT,R_PARENT,PUNTO_COMA,WORLDS,WORLD,ALL,SYM;
nonterminal producWorld,config, configPlayer,posTB,posBox,posT,typeH,configPro,posPlayer,configBoard,configBoardArray,configBox,configBoxArray,configTarget,configTargetArray;
nonterminal Double operacion1,operacion2,operacion3,operacion4;
nonterminal World atri;
nonterminal ArrayList<World> worldPro;
nonterminal Response inic;

precedence left SUMA;
precedence left RESTA ;
precedence left MULTIPLY;
precedence left DIVISION;
start with inic;

inic ::= LLAVE_A COMILLA WORLDS COMILLA DOS_PUNTOS COMILLA ALL:a COMILLA LLAVE_C {:RESULT=new Response(Response_E.REQUEST_ALL_WORLDS,null,null,null);
                                                                           System.out.println("mandare todos los mundos");  :}
        | LLAVE_A COMILLA WORLD COMILLA DOS_PUNTOS COMILLA PALABRA:a COMILLA LLAVE_C {:RESULT=new Response(Response_E.REQUEST_FOR_NAME,null,a.getLexeme(),null);
                                                                            System.out.println("mandare el mundo pedido " +a.getLexeme());  :}
        |worldPro:a {:
                    RESULT= new Response(Response_E.REQUEST_NEW_WORLD,a,null,null);
                     /*RESULT= new Response(Response_E.REQUEST_NEW_WORLD,a);*/
                        :}
        | error LLAVE_A
        | error LLAVE_C
        | error DOS_PUNTOS
        | error COMILLA;
worldPro ::=  worldPro:n1 COMA LLAVE_A atri:a1 LLAVE_C
                {:
                a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                               getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer());
                n1.add(a1);
                RESULT=n1;
                :}
            | LLAVE_A atri:a1 LLAVE_C {:
             RESULT= new ArrayList<World>();
             RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                     getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer()));
                                                                                                  :}
            | error COMA;
atri ::= atri COMA producWorld  {:RESULT= getSingletonInstanceWorld(); :}
        | producWorld  {:RESULT= getSingletonInstanceWorld(); :}
        | error COMA;

producWorld ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA:a1 COMILLA  {: getSingletonInstanceWorld().setName(a1.getLexeme());:}
                | COMILLA ROWS COMILLA DOS_PUNTOS  operacion1:a1   {: getSingletonInstanceWorld().setRows(a1.intValue()); :}
                | COMILLA COLS COMILLA DOS_PUNTOS  operacion1:a1   {: getSingletonInstanceWorld().setCols(a1.intValue()); :}
                | COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A config:a1 LLAVE_C   {: getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),getSingletonInstanceConfig().getTarget_color(),
                                                     getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));  :}
                | COMILLA BOARD COMILLA DOS_PUNTOS L_CORCHETE configBoardArray:a1 R_CORCHETE  {:   :}
                | COMILLA BOXES COMILLA DOS_PUNTOS L_CORCHETE configBoxArray:a1 R_CORCHETE {:  :}
                | COMILLA TARGETS COMILLA DOS_PUNTOS L_CORCHETE configTargetArray:a1 R_CORCHETE{:  :}
                | COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A configPlayer:a1 LLAVE_C    {: getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY())); :}
                | error COMILLA
                | error DOS_PUNTOS
                | error L_CORCHETE
                | error R_CORCHETE
                | error LLAVE_A
                | error LLAVE_C
                /*|error:e{: syntax_error(); :} COMILLA*/;

configBoardArray ::= configBoardArray COMA LLAVE_A  configBoard  LLAVE_C {: getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType())); :}
                    | LLAVE_A  configBoard  LLAVE_C{:getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType())); :}
                    | error LLAVE_A
                    | error LLAVE_C
                    | error COMA;

configBoard ::= configBoard COMA posTB:a1
                |  posTB:a1
                | error COMA;

configBoxArray ::= configBoxArray COMA LLAVE_A configBox LLAVE_C {:  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); :}
                   | LLAVE_A configBox LLAVE_C {:  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); :}
                   | error LLAVE_A
                   | error LLAVE_C
                   | error COMA;
configBox ::= configBox COMA  posBox:a1 /*{:  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); :}*/
              |  posBox:a1
              | error COMA
/*{:  getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY())); :}*/
;
configTargetArray ::= configTargetArray COMA LLAVE_A configTarget LLAVE_C  {: getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); :}
                    | LLAVE_A configTarget LLAVE_C {:getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); :}
                    | error LLAVE_A
                    | error LLAVE_C
                    | error COMA;
configTarget ::= configTarget COMA posT:a1 /* {: getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); :}*/
                |  posT:a1
                | error COMA
/*{:getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); :}*/
;

configPlayer ::= configPlayer COMA posPlayer:a1  {: RESULT=a1; :}
                |  posPlayer:a1
{: RESULT=a1;:}
                | error COMA
;
posT ::=  COMILLA POS_X COMILLA DOS_PUNTOS operacion1:a1
{: getSingletonInstanceTarget().setPosX(a1.intValue()); :}

        | COMILLA POS_Y COMILLA DOS_PUNTOS operacion1:a1
{: getSingletonInstanceTarget().setPosY(a1.intValue()); :}
        | error COMILLA
        | error DOS_PUNTOS
        | error POS_X
        | error POS_Y
;


posBox ::=  COMILLA POS_X COMILLA DOS_PUNTOS operacion1:a1
 {: getSingletonInstanceBox().setPosX(a1.intValue()); :}

        | COMILLA POS_Y COMILLA DOS_PUNTOS operacion1:a1
 {:   getSingletonInstanceBox().setPosY(a1.intValue()); :}
        | error COMILLA
        | error DOS_PUNTOS
        | error POS_X
        | error POS_Y
;

posPlayer ::=  COMILLA POS_X COMILLA DOS_PUNTOS operacion1:a1
{: getSingletonInstancePlayer().setPosX(a1.intValue()); :}

        | COMILLA POS_Y COMILLA DOS_PUNTOS operacion1:a1
{:   getSingletonInstancePlayer().setPosY(a1.intValue()); :}
        | error COMILLA
        | error DOS_PUNTOS
        | error POS_X
        | error POS_Y
;

posTB ::=  COMILLA POS_X COMILLA DOS_PUNTOS operacion1:a1
{:  getSingletonInstanceBoard().setPosX(a1.intValue()); :}

         | COMILLA POS_Y COMILLA DOS_PUNTOS operacion1:a1
{:  getSingletonInstanceBoard().setPosY(a1.intValue()); :}

         | COMILLA TYPE COMILLA DOS_PUNTOS typeH:a1
{:  getSingletonInstanceBoard().setType((Integer)a1); :}
        | error COMILLA
        | error DOS_PUNTOS
        | error POS_X
        | error POS_Y
        | error TYPE
;

typeH ::= COMILLA HALL:t1 COMILLA
 {:
  RESULT= t1.getTokenType()
  ;:}

         | COMILLA BRICK:t1 COMILLA
{: RESULT=t1.getTokenType() ;:}
        | error COMILLA
;
config ::= config COMA configPro
           | configPro:a1 {: RESULT=a1;:}
           | error COMA;
configPro ::= COMILLA BOX_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
 {:  getSingletonInstanceConfig().setBox_color(a1.getLexeme());  :}

              | COMILLA BOX_ON_TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());  :}

              | COMILLA TARGET_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setTarget_color(a1.getLexeme());  :}

              | COMILLA BRICK_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setBrick_color(a1.getLexeme());  :}

              | COMILLA HALL_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setHall_color(a1.getLexeme());  :}

              | COMILLA UNDEFINED_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());  :}

              | COMILLA PLAYER_COLOR COMILLA DOS_PUNTOS COMILLA PALABRA_COLOR:a1 COMILLA
{:  getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());  :}
               | error COMILLA
               | error DOS_PUNTOS;

/*operacion ::= operacion1:a1 {:RESULT=a1;:}
              | COMILLA operacion1:a1 COMILLA {:RESULT=a1;:};*/

///*operacion5 ::= L_PARENT operacion1:a1 R_PARENT
//               | operacion1:a ;*/

operacion1 ::=operacion1:a1 SUMA operacion1:a2 {:RESULT = a1 + a2 ; :}
            | operacion1:a1 RESTA operacion1:a2 {:RESULT = a1 - a2 ; :}
            | operacion2:a1 {:RESULT = a1 ; :};
operacion2 ::= operacion2:a1 MULTIPLY:p operacion2:a2 {:RESULT = a1 * a2 ;:}
             | operacion2:a1 DIVISION:p operacion2:a2 {:
                        if(a2==0){
                            erroForClient.add(new ErrorModel("DIVISION", p.getLine(), p.getColumn(), ErrorType.SINTACTICO, "estas_diviendo_por_0_"));
                            RESULT=1.0;
                        };
             RESULT = a1 / a2 ;
             :}
             | operacion3:a1 {:RESULT = a1 ; :} ;
operacion3 ::= ENTERO:a1 {:RESULT = Double.parseDouble(a1.getLexeme()); :}
               | operacion4:a1 {:RESULT =a1;:};
operacion4 ::= L_PARENT operacion1:a1 R_PARENT {:RESULT =a1;:}
               |COMILLA operacion1:a1 COMILLA {:RESULT =a1;:}
               | CEIL L_PARENT operacion1:a1  R_PARENT {:RESULT = Math.ceil(a1);:}
               | FLOOR L_PARENT operacion1:a1 R_PARENT {:RESULT = Math.floor(a1);:}
               | DECIMAL:a1 {: RESULT = Double.parseDouble(a1.getLexeme()); :}
               | error L_PARENT
               | error R_PARENT
               | error COMILLA;