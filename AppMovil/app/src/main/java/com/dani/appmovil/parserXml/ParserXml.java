
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.appmovil.parserXml;

import java.util.ArrayList;
import com.dani.appmovil.objects.*;
import com.dani.appmovil.objectsWorld.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserXml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserXmlSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserXml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserXml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserXml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\111\006\000\002\111" +
    "\006\000\002\064\021\000\002\112\006\000\002\112\005" +
    "\000\002\101\021\000\002\013\004\000\002\013\003\000" +
    "\002\102\003\000\002\102\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\110\006\000\002\110" +
    "\006\000\002\110\005\000\002\110\005\000\002\107\004" +
    "\000\002\107\003\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\104" +
    "\004\000\002\104\003\000\002\105\004\000\002\105\003" +
    "\000\002\106\004\000\002\106\003\000\002\004\004\000" +
    "\002\004\003\000\002\007\005\000\002\007\005\000\002" +
    "\006\005\000\002\006\005\000\002\012\005\000\002\012" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\010\003\000\002\010\003\000\002\003\004\000" +
    "\002\003\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\065\005\000\002\066\006" +
    "\000\002\067\005\000\002\070\006\000\002\071\005\000" +
    "\002\072\006\000\002\073\005\000\002\074\006\000\002" +
    "\075\005\000\002\076\006\000\002\077\005\000\002\100" +
    "\006\000\002\014\005\000\002\015\006\000\002\016\005" +
    "\000\002\017\006\000\002\020\005\000\002\021\006\000" +
    "\002\022\005\000\002\023\006\000\002\024\005\000\002" +
    "\025\006\000\002\026\005\000\002\027\006\000\002\030" +
    "\005\000\002\031\006\000\002\032\005\000\002\033\006" +
    "\000\002\034\005\000\002\035\006\000\002\036\005\000" +
    "\002\037\006\000\002\040\005\000\002\041\006\000\002" +
    "\042\005\000\002\043\006\000\002\044\005\000\002\045" +
    "\006\000\002\046\005\000\002\047\006\000\002\050\005" +
    "\000\002\051\006\000\002\052\005\000\002\053\006\000" +
    "\002\054\005\000\002\055\006\000\002\056\005\000\002" +
    "\057\006\000\002\060\005\000\002\061\006\000\002\062" +
    "\005\000\002\063\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\004\054\006\001\002\000\004\054\027\001" +
    "\002\000\004\002\025\001\002\000\004\052\007\001\002" +
    "\000\004\051\010\001\002\000\004\010\011\001\002\000" +
    "\004\050\012\001\002\000\004\056\013\001\002\000\004" +
    "\053\014\001\002\000\004\056\015\001\002\000\004\012" +
    "\016\001\002\000\004\050\017\001\002\000\004\056\020" +
    "\001\002\000\004\011\021\001\002\000\004\056\022\001" +
    "\002\000\004\052\023\001\002\000\004\055\024\001\002" +
    "\000\004\054\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\054\375\001\002\000\006\014\370\020\367\001\002" +
    "\000\004\054\033\001\002\000\004\054\357\001\002\000" +
    "\006\007\043\054\040\001\002\000\004\021\034\001\002" +
    "\000\004\055\035\001\002\000\006\007\uff94\054\uff94\001" +
    "\002\000\004\004\347\001\002\000\004\004\341\001\002" +
    "\000\022\022\254\023\251\024\246\025\252\026\245\027" +
    "\244\030\253\031\250\001\002\000\004\054\056\001\002" +
    "\000\004\054\275\001\002\000\004\054\270\001\002\000" +
    "\004\054\241\001\002\000\004\054\056\001\002\000\004" +
    "\054\114\001\002\000\004\054\uffc7\001\002\000\004\007" +
    "\105\001\002\000\004\054\056\001\002\000\004\004\077" +
    "\001\002\000\004\054\uffbb\001\002\000\004\004\071\001" +
    "\002\000\004\054\065\001\002\000\006\036\057\037\060" +
    "\001\002\000\004\055\062\001\002\000\004\055\061\001" +
    "\002\000\004\004\uff82\001\002\000\004\004\uff80\001\002" +
    "\000\004\054\uffbc\001\002\000\004\054\uffc1\001\002\000" +
    "\010\013\066\036\057\037\060\001\002\000\004\027\067" +
    "\001\002\000\004\055\070\001\002\000\004\054\uff87\001" +
    "\002\000\004\054\073\001\002\000\004\054\uffb4\001\002" +
    "\000\004\013\074\001\002\000\004\037\075\001\002\000" +
    "\004\055\076\001\002\000\004\054\uff81\001\002\000\004" +
    "\054\100\001\002\000\004\013\102\001\002\000\004\054" +
    "\uffb3\001\002\000\004\036\103\001\002\000\004\055\104" +
    "\001\002\000\004\054\uff7f\001\002\000\004\054\107\001" +
    "\002\000\004\054\uffc6\001\002\000\004\013\110\001\002" +
    "\000\004\022\111\001\002\000\004\055\112\001\002\000" +
    "\004\054\uff91\001\002\000\004\007\215\001\002\000\020" +
    "\041\177\042\203\043\201\044\175\045\174\046\202\047" +
    "\200\001\002\000\004\054\171\001\002\000\004\007\163" +
    "\001\002\000\004\007\155\001\002\000\004\007\147\001" +
    "\002\000\004\007\141\001\002\000\004\007\133\001\002" +
    "\000\004\007\125\001\002\000\004\054\uffaa\001\002\000" +
    "\004\054\127\001\002\000\004\054\uffa4\001\002\000\004" +
    "\013\130\001\002\000\004\046\131\001\002\000\004\055" +
    "\132\001\002\000\004\054\uff71\001\002\000\004\054\135" +
    "\001\002\000\004\054\uffa5\001\002\000\004\013\136\001" +
    "\002\000\004\045\137\001\002\000\004\055\140\001\002" +
    "\000\004\054\uff73\001\002\000\004\054\143\001\002\000" +
    "\004\054\uffa3\001\002\000\004\013\144\001\002\000\004" +
    "\047\145\001\002\000\004\055\146\001\002\000\004\054" +
    "\uff6f\001\002\000\004\054\151\001\002\000\004\054\uffa6" +
    "\001\002\000\004\013\152\001\002\000\004\044\153\001" +
    "\002\000\004\055\154\001\002\000\004\054\uff75\001\002" +
    "\000\004\054\157\001\002\000\004\054\uffa9\001\002\000" +
    "\004\013\160\001\002\000\004\041\161\001\002\000\004" +
    "\055\162\001\002\000\004\054\uff7b\001\002\000\004\054" +
    "\164\001\002\000\004\013\166\001\002\000\004\054\uffa8" +
    "\001\002\000\004\042\167\001\002\000\004\055\170\001" +
    "\002\000\004\054\uff79\001\002\000\022\013\176\041\177" +
    "\042\203\043\201\044\175\045\174\046\202\047\200\001" +
    "\002\000\004\054\uffc3\001\002\000\004\054\uffab\001\002" +
    "\000\004\055\214\001\002\000\004\055\213\001\002\000" +
    "\004\025\211\001\002\000\004\055\210\001\002\000\004" +
    "\055\207\001\002\000\004\055\206\001\002\000\004\055" +
    "\205\001\002\000\004\055\204\001\002\000\004\007\uff7a" +
    "\001\002\000\004\007\uff72\001\002\000\004\007\uff78\001" +
    "\002\000\004\007\uff70\001\002\000\004\007\uff7c\001\002" +
    "\000\004\055\212\001\002\000\004\054\uff8b\001\002\000" +
    "\004\007\uff76\001\002\000\004\007\uff74\001\002\000\004" +
    "\054\216\001\002\000\004\013\220\001\002\000\004\054" +
    "\uffa7\001\002\000\004\043\221\001\002\000\004\055\222" +
    "\001\002\000\004\054\uff77\001\002\000\004\054\235\001" +
    "\002\000\004\004\231\001\002\000\004\054\uffb9\001\002" +
    "\000\004\004\227\001\002\000\004\054\073\001\002\000" +
    "\004\054\uffb6\001\002\000\004\054\100\001\002\000\004" +
    "\054\uffb5\001\002\000\004\054\uffba\001\002\000\004\054" +
    "\uffc0\001\002\000\010\013\236\036\057\037\060\001\002" +
    "\000\004\030\237\001\002\000\004\055\240\001\002\000" +
    "\004\054\uff85\001\002\000\024\013\247\022\254\023\251" +
    "\024\246\025\252\026\245\027\244\030\253\031\250\001" +
    "\002\000\004\054\uffc8\001\002\000\004\054\uffc9\001\002" +
    "\000\004\055\266\001\002\000\004\055\265\001\002\000" +
    "\004\055\264\001\002\000\004\021\262\001\002\000\004" +
    "\055\261\001\002\000\004\055\260\001\002\000\004\055" +
    "\257\001\002\000\004\055\256\001\002\000\004\055\255" +
    "\001\002\000\004\007\uff92\001\002\000\004\054\uff86\001" +
    "\002\000\004\054\uff8c\001\002\000\004\004\uff90\001\002" +
    "\000\004\054\uff84\001\002\000\004\055\263\001\002\000" +
    "\004\054\uff93\001\002\000\004\004\uff8e\001\002\000\004" +
    "\054\uff8a\001\002\000\004\054\uff88\001\002\000\004\054" +
    "\uffca\001\002\000\004\013\247\001\002\000\004\004\321" +
    "\001\002\000\004\054\uffbd\001\002\000\004\004\317\001" +
    "\002\000\004\054\312\001\002\000\010\036\057\037\060" +
    "\040\307\001\002\000\006\005\301\006\300\001\002\000" +
    "\004\054\303\001\002\000\004\054\uffac\001\002\000\004" +
    "\054\uffad\001\002\000\004\054\uffae\001\002\000\004\013" +
    "\304\001\002\000\004\040\305\001\002\000\004\055\306" +
    "\001\002\000\004\054\uff7d\001\002\000\004\055\310\001" +
    "\002\000\010\005\uff7e\006\uff7e\007\uff7e\001\002\000\004" +
    "\054\uffbe\001\002\000\012\013\314\036\057\037\060\040" +
    "\307\001\002\000\004\054\uffc2\001\002\000\004\026\315" +
    "\001\002\000\004\055\316\001\002\000\004\054\uff89\001" +
    "\002\000\004\054\073\001\002\000\004\054\uffb0\001\002" +
    "\000\004\054\100\001\002\000\004\054\uffaf\001\002\000" +
    "\004\054\uffb7\001\002\000\004\004\337\001\002\000\004" +
    "\004\335\001\002\000\004\054\331\001\002\000\004\054" +
    "\uffb8\001\002\000\004\054\uffbf\001\002\000\010\013\332" +
    "\036\057\037\060\001\002\000\004\031\333\001\002\000" +
    "\004\055\334\001\002\000\004\054\uff83\001\002\000\004" +
    "\054\073\001\002\000\004\054\uffb2\001\002\000\004\054" +
    "\100\001\002\000\004\054\uffb1\001\002\000\004\054\343" +
    "\001\002\000\004\054\uffc5\001\002\000\004\013\344\001" +
    "\002\000\004\023\345\001\002\000\004\055\346\001\002" +
    "\000\004\054\uff8f\001\002\000\004\054\351\001\002\000" +
    "\004\054\uffc4\001\002\000\004\013\352\001\002\000\004" +
    "\024\353\001\002\000\004\055\354\001\002\000\004\054" +
    "\uff8d\001\002\000\004\002\000\001\002\000\006\007\363" +
    "\054\040\001\002\000\006\013\360\021\034\001\002\000" +
    "\004\020\361\001\002\000\004\055\362\001\002\000\004" +
    "\002\uff95\001\002\000\004\054\270\001\002\000\004\054" +
    "\241\001\002\000\004\054\uffcc\001\002\000\004\054\uffcb" +
    "\001\002\000\004\055\372\001\002\000\004\055\371\001" +
    "\002\000\004\054\uffa2\001\002\000\004\054\uff96\001\002" +
    "\000\004\054\u0162\001\002\000\004\054\u0102\001\002\000" +
    "\004\015\376\001\002\000\004\055\377\001\002\000\004" +
    "\054\uffa0\001\002\000\004\054\u015c\001\002\000\126\004" +
    "\u0109\005\u0115\006\u0117\007\u011a\010\u0114\011\u0124\012\u0127" +
    "\013\u012b\014\u0105\015\u0113\017\u011b\020\u0108\021\u011d\022" +
    "\u0121\023\u010d\024\u0123\025\u010e\026\u0112\027\u0126\030\u010a" +
    "\031\u0118\032\u0122\033\u012c\034\u012d\036\u012e\037\u012f\040" +
    "\u0111\041\u010b\042\u0110\043\u010c\044\u0106\045\u0116\046\u012a" +
    "\050\u011c\051\u0129\052\u0107\053\u0119\054\u0120\055\u011e\056" +
    "\u010f\057\u0128\060\u011f\001\002\000\004\032\u0103\001\002" +
    "\000\004\055\u0104\001\002\000\126\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e" +
    "\033\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\001\002\000\004\054\uffec\001\002\000\004\054\uffd7" +
    "\001\002\000\004\054\uffd2\001\002\000\004\054\ufff2\001" +
    "\002\000\004\054\uffce\001\002\000\004\054\uffe2\001\002" +
    "\000\004\054\uffda\001\002\000\004\054\uffd8\001\002\000" +
    "\004\054\uffe7\001\002\000\004\054\uffe5\001\002\000\004" +
    "\054\ufff5\001\002\000\004\054\uffd9\001\002\000\004\054" +
    "\uffdb\001\002\000\004\054\uffe4\001\002\000\004\054\uffea" +
    "\001\002\000\004\054\ufff1\001\002\000\004\054\ufff0\001" +
    "\002\000\004\054\uffd6\001\002\000\004\054\uffef\001\002" +
    "\000\004\054\uffe1\001\002\000\004\054\uffd1\001\002\000" +
    "\004\054\ufff3\001\002\000\004\054\ufff4\001\002\000\004" +
    "\054\uffd4\001\002\000\004\054\uffe9\001\002\000\004\054" +
    "\uffcf\001\002\000\004\054\uffeb\001\002\000\004\054\uffd0" +
    "\001\002\000\004\054\uffe8\001\002\000\004\054\uffe0\001" +
    "\002\000\004\054\uffe6\001\002\000\004\054\ufff6\001\002" +
    "\000\004\054\u0131\001\002\000\004\054\uffe3\001\002\000" +
    "\004\054\uffee\001\002\000\004\054\uffcd\001\002\000\004" +
    "\054\uffd3\001\002\000\004\054\uffd5\001\002\000\004\054" +
    "\uffed\001\002\000\004\054\uffdf\001\002\000\004\054\uffde" +
    "\001\002\000\004\054\uffdc\001\002\000\004\054\uffdd\001" +
    "\002\000\004\054\u0136\001\002\000\004\013\u0132\001\002" +
    "\000\004\032\u0133\001\002\000\004\055\u0134\001\002\000" +
    "\004\054\uff9d\001\002\000\006\004\u013a\011\u0139\001\002" +
    "\000\004\033\u0137\001\002\000\004\055\u0138\001\002\000" +
    "\006\004\uff9c\011\uff9c\001\002\000\004\054\ufff7\001\002" +
    "\000\004\054\ufff8\001\002\000\004\054\u013d\001\002\000" +
    "\004\054\u0141\001\002\000\004\013\u013e\001\002\000\004" +
    "\033\u013f\001\002\000\004\055\u0140\001\002\000\004\054" +
    "\uff9b\001\002\000\004\034\u0159\001\002\000\006\004\u013a" +
    "\011\u0139\001\002\000\004\054\u0145\001\002\000\004\054" +
    "\u0149\001\002\000\004\013\u0146\001\002\000\004\034\u0147" +
    "\001\002\000\004\055\u0148\001\002\000\004\054\uff99\001" +
    "\002\000\004\040\307\001\002\000\004\007\u014b\001\002" +
    "\000\004\054\303\001\002\000\004\054\u014d\001\002\000" +
    "\004\016\u0157\001\002\000\004\007\u014f\001\002\000\006" +
    "\007\ufff9\054\ufff9\001\002\000\006\007\u0151\054\u0153\001" +
    "\002\000\006\007\ufffa\054\ufffa\001\002\000\004\054\ufffb" +
    "\001\002\000\004\013\u0154\001\002\000\004\016\u0155\001" +
    "\002\000\004\055\u0156\001\002\000\004\054\uff97\001\002" +
    "\000\004\055\u0158\001\002\000\004\007\uff98\001\002\000" +
    "\004\055\u015a\001\002\000\006\004\uff9a\011\uff9a\001\002" +
    "\000\004\054\ufffc\001\002\000\004\013\u015d\001\002\000" +
    "\004\015\u015e\001\002\000\004\055\u015f\001\002\000\004" +
    "\054\uff9f\001\002\000\004\002\uffff\001\002\000\004\054" +
    "\u0102\001\002\000\006\013\u0163\015\376\001\002\000\004" +
    "\014\u0164\001\002\000\004\055\u0165\001\002\000\004\002" +
    "\uffa1\001\002\000\004\054\u015c\001\002\000\004\054\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\006\064\003\111\004\001\001\000\006\014" +
    "\027\065\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\373\112" +
    "\372\001\001\000\002\001\001\000\006\016\031\110\030" +
    "\001\001\000\006\015\354\016\355\001\001\000\026\002" +
    "\046\020\047\022\036\024\035\026\045\030\041\032\050" +
    "\034\044\036\040\107\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\325\012\322\040" +
    "\324\042\323\001\001\000\014\005\271\040\272\042\270" +
    "\044\275\104\273\001\001\000\004\017\266\001\001\000" +
    "\026\002\241\017\242\020\047\022\036\024\035\026\045" +
    "\030\041\032\050\034\044\036\040\001\001\000\012\007" +
    "\224\040\225\042\223\106\222\001\001\000\024\003\114" +
    "\011\123\046\116\050\115\052\112\054\117\056\121\060" +
    "\122\062\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\052\040\053\042\051\105\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\062\033\063\040\053\042\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\172\027\171\046\116\050\115\052\112\054\117\056\121" +
    "\060\122\062\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\232\035\233\040\225\042\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\227\001" +
    "\001\000\002\001\001\000\004\043\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\310\031\312\040\272\042" +
    "\270\044\275\001\001\000\002\001\001\000\004\010\276" +
    "\001\001\000\004\045\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\317\001\001\000\002\001\001" +
    "\000\004\043\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\326" +
    "\037\327\040\324\042\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\335\001\001\000" +
    "\002\001\001\000\004\043\337\001\001\000\002\001\001" +
    "\000\004\023\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\046\020\047\022\036\024" +
    "\035\026\045\030\041\032\050\034\044\036\040\107\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\365\001\001\000\026" +
    "\002\241\017\364\020\047\022\036\024\035\026\045\030" +
    "\041\032\050\034\044\036\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\066\u015f\067\u0160" +
    "\001\001\000\006\071\u0100\101\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\u015a" +
    "\001\001\000\004\103\u0124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\072\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\u013b\001" +
    "\001\000\004\075\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u0142\001\001\000\004\076\u0143\001\001" +
    "\000\004\044\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\u014b\001\001\000\004\077" +
    "\u014d\001\001\000\002\001\001\000\004\013\u014f\001\001" +
    "\000\002\001\001\000\004\100\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\071\u0100" +
    "\101\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u0166\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserXml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserXml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserXml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*public ParserXml(LexXml lexer){
        super(lexer);
    }*/
    public static World worldSingleton;
        public static World getSingletonInstanceWorld() {
            if (worldSingleton == null){
                worldSingleton = new World();
            }
            else{
               /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
            }
            return worldSingleton;
        }

         public static Board boardSingleton;
                public static Board getSingletonInstanceBoard() {
                    if (boardSingleton == null){
                        boardSingleton = new Board();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                    }
                    return boardSingleton;
                }
          public static Box boxSingleton;
                public static Box getSingletonInstanceBox() {
                    if (boxSingleton == null){
                        boxSingleton = new Box();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                    }
                        return boxSingleton;
                }
          public static Target targetSingleton;
                public static Target getSingletonInstanceTarget() {
                    if (targetSingleton == null){
                        targetSingleton = new Target();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                    }
                    return targetSingleton;
                }
          public static Player playerSingleton;
                public static Player getSingletonInstancePlayer() {
                    if (playerSingleton == null){
                        playerSingleton = new Player();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                    }
                    return playerSingleton;
                }
          public static ConfigWorld configSingleton;
                public static ConfigWorld getSingletonInstanceConfig() {
                    if (configSingleton == null){
                        configSingleton = new ConfigWorld();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                    }
                    return configSingleton;
                }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserXml$actions {
  private final ParserXml parser;

  /** Constructor */
  CUP$ParserXml$actions(ParserXml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action_part00000000(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserXml$result;

      /* select the action based on the action number */
      switch (CUP$ParserXml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		ArrayList<World> start_val = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		RESULT = start_val;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserXml$parser.done_parsing();
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inic ::= enco worldsA worldPro worldsC 
            {
              ArrayList<World> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		ArrayList<World> a = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                       RESULT=a;
                    
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("inic",71, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inic ::= enco errorsA erroPro errorsC 
            {
              ArrayList<World> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		ArrayList<World> a = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;

                        RESULT=a;
                getSingletonInstanceWorld().clean();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("inic",71, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // enco ::= SIGNO_A INTERROGACION XML VERSION SIG_IGUAL SIG_COMILLAS DECIMAL SIG_COMILLAS ENCODING SIG_IGUAL SIG_COMILLAS LITERAL SIG_COMILLAS INTERROGACION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("enco",50, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-14)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // erroPro ::= erroPro errorA findErro errorC 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
             a1= new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),
                             getSingletonInstanceWorld().getConfig(),getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),
                             getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),getSingletonInstanceWorld().getErrArray());
              n1.add((World)a1);
              RESULT=n1;

             
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("erroPro",72, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // erroPro ::= errorA findErro errorC 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
            RESULT = new ArrayList<World>();
            RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),
            getSingletonInstanceWorld().getConfig(),getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),
            getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),getSingletonInstanceWorld().getErrArray()));
                         /* getSingletonInstanceWorld().clean();          */
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("erroPro",72, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // findErro ::= lexemaA proErr lexemaC lineaA proLine lineaC columnA proLine columnC typeA PALABRA typeC descriptionA descripPro descriptionC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-13)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-13)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-13)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-10)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-10)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-10)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-7)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-7)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-7)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-4)).right;
		Token a4 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		getSingletonInstanceWorld().getErrArray().add(new AError(a1.toString(),Integer.parseInt( a2.toString()) ,Integer.parseInt(a3.toString()),a4.getLexeme(), (String)a5));
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("findErro",63, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-14)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // descripPro ::= descripPro PALABRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a.getInfo();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descripPro",9, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // descripPro ::= PALABRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a.getInfo();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descripPro",9, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proLine ::= ENTERO 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT=Integer.parseInt(a1.getLexeme());
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proLine",64, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proLine ::= LITERAL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT=Integer.parseInt(a1.getLexeme());
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proLine",64, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proErr ::= LITERAL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a1.getLexeme(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proErr ::= SIG_COMILLAS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proErr ::= SYM 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proErr ::= PALABRA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT= a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // proErr ::= WORLDS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // proErr ::= VERSION 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // proErr ::= HALL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // proErr ::= BRICK 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // proErr ::= ENCODING 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // proErr ::= DIVISION 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // proErr ::= ERRORS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // proErr ::= ERROR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // proErr ::= ERR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // proErr ::= WORLD 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // proErr ::= NAME 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // proErr ::= ROWS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // proErr ::= COLS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // proErr ::= CONFIG 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // proErr ::= BOARD 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // proErr ::= BOXES 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // proErr ::= TARGETS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // proErr ::= PLAYER 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // proErr ::= LEXEMA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proErr ::= LINEA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // proErr ::= COLUMNA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proErr ::= POS_X 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proErr ::= POS_Y 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proErr ::= TYPE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proErr ::= BOX_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proErr ::= BOX_ON_TARGET_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proErr ::= TARGET_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // proErr ::= BRICK_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proErr ::= HALL_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // proErr ::= UNDEFINED_COLOR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // proErr ::= SIG_IGUAL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // proErr ::= XML 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // proErr ::= INTERROGACION 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // proErr ::= DECIMAL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // proErr ::= SIGNO_A 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // proErr ::= SIGNO_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // proErr ::= ENTERO 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // proErr ::= ALL 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		RESULT = a1.getLexeme();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("proErr",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // worldPro ::= worldPro worldA atri worldC 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                               getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),new ArrayList<>());
                n1.add(a1);

                RESULT=n1;
                getSingletonInstanceWorld().clean();
                
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // worldPro ::= worldPro worldA PALABRA worldC 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                n1.add(new World(a1.getLexeme(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                                                                  getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),new ArrayList<>()));

                            RESULT=n1;
                             getSingletonInstanceWorld().clean();
            
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // worldPro ::= worldA PALABRA worldC 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                        RESULT= new ArrayList<World>();
                                     RESULT.add(new World(a1.getLexeme(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                             getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),new ArrayList<>()));
                         getSingletonInstanceWorld().clean();
                        
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // worldPro ::= worldA atri worldC 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
             RESULT= new ArrayList<World>();
             RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                     getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),new ArrayList<>()));
                                          getSingletonInstanceWorld().clean();                                                         
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atri ::= atri producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atri ::= producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // producWorld ::= nameA PALABRA nameC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setName(a1.getLexeme());
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // producWorld ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setRows(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // producWorld ::= colsA ENTERO colsC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setCols(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // producWorld ::= configA config configC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),
                                                       getSingletonInstanceConfig().getTarget_color(),getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(),
                                                       getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));
                                                        getSingletonInstanceConfig().clean(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // producWorld ::= boardA configBoard boardC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType()));
                                                         getSingletonInstanceBoard().clean();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // producWorld ::= boxA configBox boxC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY()));
                                                                    getSingletonInstanceBox().clean();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // producWorld ::= targetA configTarget targetC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY()));
                                                        getSingletonInstanceTarget().clean();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // producWorld ::= playerA configPlayer playerC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY()));
                                                                            getSingletonInstancePlayer().clean();
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // configBoard ::= configBoard posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard",66, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // configBoard ::= posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard",66, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // configBox ::= configBox posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox",67, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // configBox ::= posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox",67, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // configTarget ::= configTarget posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget",68, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // configTarget ::= posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget",68, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // configPlayer ::= configPlayer posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // configPlayer ::= posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // posT ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceTarget().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // posT ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceTarget().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // posBox ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceBox().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // posBox ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		   getSingletonInstanceBox().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // posPlayer ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstancePlayer().setPosX( Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // posPlayer ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		   getSingletonInstancePlayer().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // posTB ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // posTB ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // posTB ::= typeA typeH typeC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setType((Integer)a1); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // typeH ::= HALL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT= t1.getTokenType() ;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // typeH ::= BRICK 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=t1.getTokenType() ;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // config ::= config configPro 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // config ::= configPro 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // configPro ::= box_colorA PALABRA box_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBox_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // configPro ::= box_on_target_colorA PALABRA box_on_target_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBox_on_target_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // configPro ::= target_colorA PALABRA target_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setTarget_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // configPro ::= brick_colorA PALABRA brick_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBrick_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // configPro ::= hall_colorA PALABRA hall_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setHall_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // configPro ::= undefined_colorA PALABRA undefined_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setUndefined_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // configPro ::= player_colorA PALABRA player_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setPlayer_color("#"+a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // errorsA ::= SIGNO_A ERRORS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorsA",51, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // errorsC ::= SIGNO_A DIVISION ERRORS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorsC",52, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // errorA ::= SIGNO_A ERR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorA",53, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // errorC ::= SIGNO_A DIVISION ERR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorC",54, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lexemaA ::= SIGNO_A LEXEMA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lexemaA",55, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lexemaC ::= SIGNO_A DIVISION LEXEMA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lexemaC",56, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lineaA ::= SIGNO_A LINEA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lineaA",57, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lineaC ::= SIGNO_A DIVISION LINEA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lineaC",58, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // columnA ::= SIGNO_A COLUMNA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("columnA",59, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // columnC ::= SIGNO_A DIVISION COLUMNA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("columnC",60, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // descriptionA ::= SIGNO_A DESCRIPCION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descriptionA",61, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // descriptionC ::= SIGNO_A DIVISION DESCRIPCION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descriptionC",62, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // worldsA ::= SIGNO_A WORLDS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsA",10, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // worldsC ::= SIGNO_A DIVISION WORLDS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsC",11, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // worldA ::= SIGNO_A WORLD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldA",12, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // worldC ::= SIGNO_A DIVISION WORLD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldC",13, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nameA ::= SIGNO_A NAME SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameA",14, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // nameC ::= SIGNO_A DIVISION NAME SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameC",15, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // rowsA ::= SIGNO_A ROWS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsA",16, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // rowsC ::= SIGNO_A DIVISION ROWS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsC",17, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // colsA ::= SIGNO_A COLS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsA",18, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // colsC ::= SIGNO_A DIVISION COLS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsC",19, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // configA ::= SIGNO_A CONFIG SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configA",20, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // configC ::= SIGNO_A DIVISION CONFIG SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configC",21, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // boardA ::= SIGNO_A BOARD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardA",22, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // boardC ::= SIGNO_A DIVISION BOARD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardC",23, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // boxA ::= SIGNO_A BOXES SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxA",24, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // boxC ::= SIGNO_A DIVISION BOXES SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxC",25, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // targetA ::= SIGNO_A TARGETS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetA",26, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // targetC ::= SIGNO_A DIVISION TARGETS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetC",27, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // playerA ::= SIGNO_A PLAYER SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerA",28, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // playerC ::= SIGNO_A DIVISION PLAYER SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerC",29, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // posX_A ::= SIGNO_A POS_X SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_A",30, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // posX_C ::= SIGNO_A DIVISION POS_X SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_C",31, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // posY_A ::= SIGNO_A POS_Y SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_A",32, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // posY_C ::= SIGNO_A DIVISION POS_Y SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_C",33, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // typeA ::= SIGNO_A TYPE SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeA",34, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // typeC ::= SIGNO_A DIVISION TYPE SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeC",35, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // box_colorA ::= SIGNO_A BOX_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorA",36, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // box_colorC ::= SIGNO_A DIVISION BOX_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorC",37, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // box_on_target_colorA ::= SIGNO_A BOX_ON_TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorA",38, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // box_on_target_colorC ::= SIGNO_A DIVISION BOX_ON_TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorC",39, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // target_colorA ::= SIGNO_A TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorA",40, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // target_colorC ::= SIGNO_A DIVISION TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorC",41, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // brick_colorA ::= SIGNO_A BRICK_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorA",42, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // brick_colorC ::= SIGNO_A DIVISION BRICK_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorC",43, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // hall_colorA ::= SIGNO_A HALL_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorA",44, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // hall_colorC ::= SIGNO_A DIVISION HALL_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorC",45, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // undefined_colorA ::= SIGNO_A UNDEFINED_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorA",46, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // undefined_colorC ::= SIGNO_A DIVISION UNDEFINED_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorC",47, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // player_colorA ::= SIGNO_A PLAYER_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorA",48, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // player_colorC ::= SIGNO_A DIVISION PLAYER_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorC",49, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserXml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
              return CUP$ParserXml$do_action_part00000000(
                               CUP$ParserXml$act_num,
                               CUP$ParserXml$parser,
                               CUP$ParserXml$stack,
                               CUP$ParserXml$top);
    }
}

}
