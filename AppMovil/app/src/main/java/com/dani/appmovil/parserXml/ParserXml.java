
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.appmovil.parserXml;

import java.util.ArrayList;
import com.dani.appmovil.objects.*;
import com.dani.appmovil.objectsWorld.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserXml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserXmlSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserXml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserXml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserXml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\110\006\000\002\110" +
    "\006\000\002\066\021\000\002\032\006\000\002\032\005" +
    "\000\002\033\021\000\002\013\004\000\002\013\003\000" +
    "\002\107\006\000\002\107\006\000\002\107\005\000\002" +
    "\107\005\000\002\106\004\000\002\106\003\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\103\004\000\002\103\003\000\002" +
    "\104\004\000\002\104\003\000\002\105\004\000\002\105" +
    "\003\000\002\004\004\000\002\004\003\000\002\007\005" +
    "\000\002\007\005\000\002\006\005\000\002\006\005\000" +
    "\002\012\005\000\002\012\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\010\003\000\002\010" +
    "\003\000\002\003\004\000\002\003\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\067\005\000\002\070\006\000\002\071\005\000\002\072" +
    "\006\000\002\073\005\000\002\074\006\000\002\075\005" +
    "\000\002\076\006\000\002\077\005\000\002\100\006\000" +
    "\002\101\005\000\002\102\006\000\002\014\005\000\002" +
    "\015\006\000\002\016\005\000\002\017\006\000\002\020" +
    "\005\000\002\021\006\000\002\022\005\000\002\023\006" +
    "\000\002\024\005\000\002\025\006\000\002\026\005\000" +
    "\002\027\006\000\002\030\005\000\002\031\006\000\002" +
    "\034\005\000\002\035\006\000\002\036\005\000\002\037" +
    "\006\000\002\040\005\000\002\041\006\000\002\042\005" +
    "\000\002\043\006\000\002\044\005\000\002\045\006\000" +
    "\002\046\005\000\002\047\006\000\002\050\005\000\002" +
    "\051\006\000\002\052\005\000\002\053\006\000\002\054" +
    "\005\000\002\055\006\000\002\056\005\000\002\057\006" +
    "\000\002\060\005\000\002\061\006\000\002\062\005\000" +
    "\002\063\006\000\002\064\005\000\002\065\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\004\053\006\001\002\000\004\053\027\001" +
    "\002\000\004\002\025\001\002\000\004\051\007\001\002" +
    "\000\004\050\010\001\002\000\004\010\011\001\002\000" +
    "\004\047\012\001\002\000\004\055\013\001\002\000\004" +
    "\011\014\001\002\000\004\055\015\001\002\000\004\012" +
    "\016\001\002\000\004\047\017\001\002\000\004\055\020" +
    "\001\002\000\004\011\021\001\002\000\004\055\022\001" +
    "\002\000\004\051\023\001\002\000\004\054\024\001\002" +
    "\000\004\053\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\053\375\001\002\000\006\014\370\017\367\001\002" +
    "\000\004\053\033\001\002\000\004\053\357\001\002\000" +
    "\006\007\043\053\040\001\002\000\004\020\034\001\002" +
    "\000\004\054\035\001\002\000\006\007\uffc0\053\uffc0\001" +
    "\002\000\004\004\347\001\002\000\004\004\341\001\002" +
    "\000\022\021\254\022\251\023\246\024\252\025\245\026" +
    "\244\027\253\030\250\001\002\000\004\053\056\001\002" +
    "\000\004\053\275\001\002\000\004\053\270\001\002\000" +
    "\004\053\241\001\002\000\004\053\056\001\002\000\004" +
    "\053\114\001\002\000\004\053\ufff3\001\002\000\004\007" +
    "\105\001\002\000\004\053\056\001\002\000\004\004\077" +
    "\001\002\000\004\053\uffe7\001\002\000\004\004\071\001" +
    "\002\000\004\053\065\001\002\000\006\035\057\036\060" +
    "\001\002\000\004\054\062\001\002\000\004\054\061\001" +
    "\002\000\004\004\uffae\001\002\000\004\004\uffac\001\002" +
    "\000\004\053\uffe8\001\002\000\004\053\uffed\001\002\000" +
    "\010\013\066\035\057\036\060\001\002\000\004\026\067" +
    "\001\002\000\004\054\070\001\002\000\004\053\uffb3\001" +
    "\002\000\004\053\073\001\002\000\004\053\uffe0\001\002" +
    "\000\004\013\074\001\002\000\004\036\075\001\002\000" +
    "\004\054\076\001\002\000\004\053\uffad\001\002\000\004" +
    "\053\100\001\002\000\004\013\102\001\002\000\004\053" +
    "\uffdf\001\002\000\004\035\103\001\002\000\004\054\104" +
    "\001\002\000\004\053\uffab\001\002\000\004\053\107\001" +
    "\002\000\004\053\ufff2\001\002\000\004\013\110\001\002" +
    "\000\004\021\111\001\002\000\004\054\112\001\002\000" +
    "\004\053\uffbd\001\002\000\004\007\215\001\002\000\020" +
    "\040\177\041\203\042\201\043\175\044\174\045\202\046" +
    "\200\001\002\000\004\053\171\001\002\000\004\007\163" +
    "\001\002\000\004\007\155\001\002\000\004\007\147\001" +
    "\002\000\004\007\141\001\002\000\004\007\133\001\002" +
    "\000\004\007\125\001\002\000\004\053\uffd6\001\002\000" +
    "\004\053\127\001\002\000\004\053\uffd1\001\002\000\004" +
    "\013\130\001\002\000\004\044\131\001\002\000\004\054" +
    "\132\001\002\000\004\053\uff9f\001\002\000\004\053\135" +
    "\001\002\000\004\053\uffd0\001\002\000\004\013\136\001" +
    "\002\000\004\045\137\001\002\000\004\054\140\001\002" +
    "\000\004\053\uff9d\001\002\000\004\053\143\001\002\000" +
    "\004\053\uffcf\001\002\000\004\013\144\001\002\000\004" +
    "\046\145\001\002\000\004\054\146\001\002\000\004\053" +
    "\uff9b\001\002\000\004\053\151\001\002\000\004\053\uffd2" +
    "\001\002\000\004\013\152\001\002\000\004\043\153\001" +
    "\002\000\004\054\154\001\002\000\004\053\uffa1\001\002" +
    "\000\004\053\157\001\002\000\004\053\uffd5\001\002\000" +
    "\004\013\160\001\002\000\004\040\161\001\002\000\004" +
    "\054\162\001\002\000\004\053\uffa7\001\002\000\004\053" +
    "\164\001\002\000\004\013\166\001\002\000\004\053\uffd4" +
    "\001\002\000\004\041\167\001\002\000\004\054\170\001" +
    "\002\000\004\053\uffa5\001\002\000\022\013\176\040\177" +
    "\041\203\042\201\043\175\044\174\045\202\046\200\001" +
    "\002\000\004\053\uffef\001\002\000\004\053\uffd7\001\002" +
    "\000\004\054\214\001\002\000\004\054\213\001\002\000" +
    "\004\024\211\001\002\000\004\054\210\001\002\000\004" +
    "\054\207\001\002\000\004\054\206\001\002\000\004\054" +
    "\205\001\002\000\004\054\204\001\002\000\004\007\uffa6" +
    "\001\002\000\004\007\uff9e\001\002\000\004\007\uffa4\001" +
    "\002\000\004\007\uff9c\001\002\000\004\007\uffa8\001\002" +
    "\000\004\054\212\001\002\000\004\053\uffb7\001\002\000" +
    "\004\007\uffa2\001\002\000\004\007\uffa0\001\002\000\004" +
    "\053\216\001\002\000\004\013\220\001\002\000\004\053" +
    "\uffd3\001\002\000\004\042\221\001\002\000\004\054\222" +
    "\001\002\000\004\053\uffa3\001\002\000\004\053\235\001" +
    "\002\000\004\004\231\001\002\000\004\053\uffe5\001\002" +
    "\000\004\004\227\001\002\000\004\053\073\001\002\000" +
    "\004\053\uffe2\001\002\000\004\053\100\001\002\000\004" +
    "\053\uffe1\001\002\000\004\053\uffe6\001\002\000\004\053" +
    "\uffec\001\002\000\010\013\236\035\057\036\060\001\002" +
    "\000\004\027\237\001\002\000\004\054\240\001\002\000" +
    "\004\053\uffb1\001\002\000\024\013\247\021\254\022\251" +
    "\023\246\024\252\025\245\026\244\027\253\030\250\001" +
    "\002\000\004\053\ufff4\001\002\000\004\053\ufff5\001\002" +
    "\000\004\054\266\001\002\000\004\054\265\001\002\000" +
    "\004\054\264\001\002\000\004\020\262\001\002\000\004" +
    "\054\261\001\002\000\004\054\260\001\002\000\004\054" +
    "\257\001\002\000\004\054\256\001\002\000\004\054\255" +
    "\001\002\000\004\007\uffbe\001\002\000\004\053\uffb2\001" +
    "\002\000\004\053\uffb8\001\002\000\004\004\uffbc\001\002" +
    "\000\004\053\uffb0\001\002\000\004\054\263\001\002\000" +
    "\004\053\uffbf\001\002\000\004\004\uffba\001\002\000\004" +
    "\053\uffb6\001\002\000\004\053\uffb4\001\002\000\004\053" +
    "\ufff6\001\002\000\004\013\247\001\002\000\004\004\321" +
    "\001\002\000\004\053\uffe9\001\002\000\004\004\317\001" +
    "\002\000\004\053\312\001\002\000\010\035\057\036\060" +
    "\037\307\001\002\000\006\005\301\006\300\001\002\000" +
    "\004\053\303\001\002\000\004\053\uffd8\001\002\000\004" +
    "\053\uffd9\001\002\000\004\053\uffda\001\002\000\004\013" +
    "\304\001\002\000\004\037\305\001\002\000\004\054\306" +
    "\001\002\000\004\053\uffa9\001\002\000\004\054\310\001" +
    "\002\000\010\005\uffaa\006\uffaa\007\uffaa\001\002\000\004" +
    "\053\uffea\001\002\000\012\013\314\035\057\036\060\037" +
    "\307\001\002\000\004\053\uffee\001\002\000\004\025\315" +
    "\001\002\000\004\054\316\001\002\000\004\053\uffb5\001" +
    "\002\000\004\053\073\001\002\000\004\053\uffdc\001\002" +
    "\000\004\053\100\001\002\000\004\053\uffdb\001\002\000" +
    "\004\053\uffe3\001\002\000\004\004\337\001\002\000\004" +
    "\004\335\001\002\000\004\053\331\001\002\000\004\053" +
    "\uffe4\001\002\000\004\053\uffeb\001\002\000\010\013\332" +
    "\035\057\036\060\001\002\000\004\030\333\001\002\000" +
    "\004\054\334\001\002\000\004\053\uffaf\001\002\000\004" +
    "\053\073\001\002\000\004\053\uffde\001\002\000\004\053" +
    "\100\001\002\000\004\053\uffdd\001\002\000\004\053\343" +
    "\001\002\000\004\053\ufff1\001\002\000\004\013\344\001" +
    "\002\000\004\022\345\001\002\000\004\054\346\001\002" +
    "\000\004\053\uffbb\001\002\000\004\053\351\001\002\000" +
    "\004\053\ufff0\001\002\000\004\013\352\001\002\000\004" +
    "\023\353\001\002\000\004\054\354\001\002\000\004\053" +
    "\uffb9\001\002\000\004\002\000\001\002\000\006\007\363" +
    "\053\040\001\002\000\006\013\360\020\034\001\002\000" +
    "\004\017\361\001\002\000\004\054\362\001\002\000\004" +
    "\002\uffc1\001\002\000\004\053\270\001\002\000\004\053" +
    "\241\001\002\000\004\053\ufff8\001\002\000\004\053\ufff7" +
    "\001\002\000\004\054\372\001\002\000\004\054\371\001" +
    "\002\000\004\053\uffce\001\002\000\004\053\uffc2\001\002" +
    "\000\004\053\u0132\001\002\000\004\053\u0102\001\002\000" +
    "\004\015\376\001\002\000\004\054\377\001\002\000\004" +
    "\053\uffcc\001\002\000\004\053\u012c\001\002\000\004\034" +
    "\u0105\001\002\000\004\031\u0103\001\002\000\004\054\u0104" +
    "\001\002\000\004\034\uffca\001\002\000\004\053\u0107\001" +
    "\002\000\004\053\u010c\001\002\000\004\013\u0108\001\002" +
    "\000\004\031\u0109\001\002\000\004\054\u010a\001\002\000" +
    "\004\053\uffc9\001\002\000\004\004\u010f\001\002\000\004" +
    "\032\u010d\001\002\000\004\054\u010e\001\002\000\004\004" +
    "\uffc8\001\002\000\004\053\u0111\001\002\000\004\053\u0115" +
    "\001\002\000\004\013\u0112\001\002\000\004\032\u0113\001" +
    "\002\000\004\054\u0114\001\002\000\004\053\uffc7\001\002" +
    "\000\004\033\u0129\001\002\000\004\004\u0117\001\002\000" +
    "\004\053\u0111\001\002\000\004\053\u0119\001\002\000\004" +
    "\037\307\001\002\000\004\007\u011b\001\002\000\004\053" +
    "\303\001\002\000\004\053\u011d\001\002\000\004\016\u0127" +
    "\001\002\000\004\007\u011f\001\002\000\006\007\ufff9\053" +
    "\ufff9\001\002\000\006\007\u0121\053\u0123\001\002\000\006" +
    "\007\ufffa\053\ufffa\001\002\000\004\053\ufffb\001\002\000" +
    "\004\013\u0124\001\002\000\004\016\u0125\001\002\000\004" +
    "\054\u0126\001\002\000\004\053\uffc3\001\002\000\004\054" +
    "\u0128\001\002\000\004\007\uffc4\001\002\000\004\054\u012a" +
    "\001\002\000\004\004\uffc6\001\002\000\004\053\ufffc\001" +
    "\002\000\004\013\u012d\001\002\000\004\015\u012e\001\002" +
    "\000\004\054\u012f\001\002\000\004\053\uffcb\001\002\000" +
    "\004\002\uffff\001\002\000\004\053\u0102\001\002\000\006" +
    "\013\u0133\015\376\001\002\000\004\014\u0134\001\002\000" +
    "\004\054\u0135\001\002\000\004\002\uffcd\001\002\000\004" +
    "\053\u012c\001\002\000\004\053\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\006\066\003\110\004\001\001\000\006\014" +
    "\027\067\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\372\071" +
    "\373\001\001\000\002\001\001\000\006\016\031\107\030" +
    "\001\001\000\006\015\354\016\355\001\001\000\026\002" +
    "\046\020\047\022\036\024\035\026\045\030\041\034\050" +
    "\036\044\040\040\106\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\325\012\322\042" +
    "\324\044\323\001\001\000\014\005\271\042\272\044\270" +
    "\046\275\103\273\001\001\000\004\017\266\001\001\000" +
    "\026\002\241\017\242\020\047\022\036\024\035\026\045" +
    "\030\041\034\050\036\044\040\040\001\001\000\012\007" +
    "\224\042\225\044\223\105\222\001\001\000\024\003\114" +
    "\011\123\050\116\052\115\054\112\056\117\060\122\062" +
    "\121\064\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\052\042\053\044\051\104\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\062\035\063\042\053\044\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\172\027\171\050\116\052\115\054\112\056\117\060\122" +
    "\062\121\064\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\232\037\233\042\225\044\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\227\001" +
    "\001\000\002\001\001\000\004\045\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\310\031\312\042\272\044" +
    "\270\046\275\001\001\000\002\001\001\000\004\010\276" +
    "\001\001\000\004\047\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\317\001\001\000\002\001\001" +
    "\000\004\045\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\326" +
    "\041\327\042\324\044\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\335\001\001\000" +
    "\002\001\001\000\004\045\337\001\001\000\002\001\001" +
    "\000\004\023\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\046\020\047\022\036\024" +
    "\035\026\045\030\041\034\050\036\044\040\040\106\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\365\001\001\000\026" +
    "\002\241\017\364\020\047\022\036\024\035\026\045\030" +
    "\041\034\050\036\044\040\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\070\u012f\071\u0130" +
    "\001\001\000\006\033\377\073\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u012a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\u0105\001\001\000\004" +
    "\075\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u010f\001\001\000\004\077\u0115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\u0117\001\001" +
    "\000\004\046\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u011b\001\001\000\004\101\u011d\001\001" +
    "\000\002\001\001\000\004\013\u011f\001\001\000\002\001" +
    "\001\000\004\102\u0121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\u0135\073\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\u0136\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserXml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserXml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserXml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /*public ParserXml(LexXml lexer){
        super(lexer);
    }*/
    public static World worldSingleton;
        public static World getSingletonInstanceWorld() {
            if (worldSingleton == null){
                worldSingleton = new World();
            }
            else{
               /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase World");*/
            }
            return worldSingleton;
        }

         public static Board boardSingleton;
                public static Board getSingletonInstanceBoard() {
                    if (boardSingleton == null){
                        boardSingleton = new Board();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Board");*/
                    }
                    return boardSingleton;
                }
          public static Box boxSingleton;
                public static Box getSingletonInstanceBox() {
                    if (boxSingleton == null){
                        boxSingleton = new Box();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Box");*/
                    }
                        return boxSingleton;
                }
          public static Target targetSingleton;
                public static Target getSingletonInstanceTarget() {
                    if (targetSingleton == null){
                        targetSingleton = new Target();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Target");*/
                    }
                    return targetSingleton;
                }
          public static Player playerSingleton;
                public static Player getSingletonInstancePlayer() {
                    if (playerSingleton == null){
                        playerSingleton = new Player();
                    }
                    else{
                       /* System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase Player");*/
                    }
                    return playerSingleton;
                }
          public static ConfigWorld configSingleton;
                public static ConfigWorld getSingletonInstanceConfig() {
                    if (configSingleton == null){
                        configSingleton = new ConfigWorld();
                    }
                    else{
                        /*System.out.println("No se puede crear el objeto  porque ya existe un objeto de la clase ConfigWorld");*/
                    }
                    return configSingleton;
                }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserXml$actions {
  private final ParserXml parser;

  /** Constructor */
  CUP$ParserXml$actions(ParserXml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action_part00000000(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserXml$result;

      /* select the action based on the action number */
      switch (CUP$ParserXml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inic EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		ArrayList<World> start_val = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		RESULT = start_val;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserXml$parser.done_parsing();
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inic ::= enco worldsA worldPro worldsC 
            {
              ArrayList<World> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		ArrayList<World> a = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                       RESULT=a;
                    
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("inic",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inic ::= enco errorsA erroPro errorsC 
            {
              ArrayList<World> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                        RESULT=(ArrayList<World>)a;
                    
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("inic",70, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // enco ::= SIGNO_A INTERROGACION XML VERSION SIG_IGUAL SIG_COMILLAS LITERAL SIG_COMILLAS ENCODING SIG_IGUAL SIG_COMILLAS LITERAL SIG_COMILLAS INTERROGACION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("enco",52, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-14)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // erroPro ::= erroPro errorA findErro errorC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("erroPro",24, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // erroPro ::= errorA findErro errorC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
            RESULT = new ArrayList<World>();
            /*RESULT.add(new)*/
            
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("erroPro",24, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // findErro ::= lexemaA TOKENERROR lexemaC lineaA ENTERO lineaC columnA ENTERO lineaC typeA PALABRA typeC descriptionA descripPro descriptionC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("findErro",25, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-14)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // descripPro ::= descripPro PALABRA 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descripPro",9, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // descripPro ::= PALABRA 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descripPro",9, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // worldPro ::= worldPro worldA atri worldC 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                a1=new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                               getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),null);
                n1.add(a1);
                RESULT=n1;
                
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // worldPro ::= worldPro worldA PALABRA worldC 
            {
              ArrayList<World> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).right;
		ArrayList<World> n1 = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                n1.add(new World(a1.getLexeme(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                                                                  getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),null));
                            RESULT=n1;
            
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // worldPro ::= worldA PALABRA worldC 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
                        RESULT= new ArrayList<World>();
                                     RESULT.add(new World(a1.getLexeme(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                                             getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),null));

                        
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // worldPro ::= worldA atri worldC 
            {
              ArrayList<World> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		World a1 = (World)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		
             RESULT= new ArrayList<World>();
             RESULT.add(new World(getSingletonInstanceWorld().getName(), getSingletonInstanceWorld().getRows(),getSingletonInstanceWorld().getCols(),getSingletonInstanceWorld().getConfig(),
                                     getSingletonInstanceWorld().getArrayBoard(),getSingletonInstanceWorld().getArrayBoxes(),getSingletonInstanceWorld().getArrayTarget(),getSingletonInstanceWorld().getPlayer(),null));
                                                                                                  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldPro",69, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atri ::= atri producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri",68, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atri ::= producWorld 
            {
              World RESULT =null;
		RESULT= getSingletonInstanceWorld(); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("atri",68, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // producWorld ::= nameA PALABRA nameC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setName(a1.getLexeme());
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // producWorld ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setRows(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // producWorld ::= colsA ENTERO colsC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setCols(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // producWorld ::= configA config configC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setConfig(new ConfigWorld(getSingletonInstanceConfig().getBox_color(),getSingletonInstanceConfig().getBox_on_target_color(),getSingletonInstanceConfig().getTarget_color(),
                                                     getSingletonInstanceConfig().getBrick_color(), getSingletonInstanceConfig().getHall_color(), getSingletonInstanceConfig().getUndefined_color(), getSingletonInstanceConfig().getPlayer_color()));  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // producWorld ::= boardA configBoard boardC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoard().add(new Board(getSingletonInstanceBoard().getPosX(),getSingletonInstanceBoard().getPosY(),getSingletonInstanceBoard().getType()));  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // producWorld ::= boxA configBox boxC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayBoxes().add(new Box(getSingletonInstanceBox().getPosX(),getSingletonInstanceBox().getPosY()));  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // producWorld ::= targetA configTarget targetC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().getArrayTarget().add(new Target(getSingletonInstanceTarget().getPosX(),getSingletonInstanceTarget().getPosY())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // producWorld ::= playerA configPlayer playerC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceWorld().setPlayer(new Player(getSingletonInstancePlayer().getPosX(),getSingletonInstancePlayer().getPosY())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("producWorld",0, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configBoard ::= configBoard posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configBoard ::= posTB 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBoard",65, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // configBox ::= configBox posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox",66, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // configBox ::= posBox 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configBox",66, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // configTarget ::= configTarget posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget",67, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // configTarget ::= posT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configTarget",67, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // configPlayer ::= configPlayer posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1; 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // configPlayer ::= posPlayer 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPlayer",2, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // posT ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceTarget().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // posT ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceTarget().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posT",5, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // posBox ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstanceBox().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // posBox ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		   getSingletonInstanceBox().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posBox",4, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // posPlayer ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		 getSingletonInstancePlayer().setPosX( Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // posPlayer ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		   getSingletonInstancePlayer().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posPlayer",8, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // posTB ::= posX_A ENTERO posX_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setPosX(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // posTB ::= posY_A ENTERO posY_C 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setPosY(Integer.parseInt(a1.getLexeme())); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // posTB ::= typeA typeH typeC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceBoard().setType((Integer)a1); 
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posTB",3, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typeH ::= HALL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT= t1.getTokenType() ;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typeH ::= BRICK 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Token t1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=t1.getTokenType() ;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeH",6, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // config ::= config configPro 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // config ::= configPro 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$ParserXml$stack.peek()).value;
		 RESULT=a1;
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("config",1, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // configPro ::= box_colorA PALABRA box_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBox_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // configPro ::= box_on_target_colorA PALABRA box_on_target_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBox_on_target_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // configPro ::= target_colorA PALABRA target_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setTarget_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // configPro ::= brick_colorA PALABRA brick_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setBrick_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // configPro ::= hall_colorA PALABRA hall_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setHall_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // configPro ::= undefined_colorA PALABRA undefined_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setUndefined_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // configPro ::= player_colorA PALABRA player_colorC 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-1)).value;
		  getSingletonInstanceConfig().setPlayer_color(a1.getLexeme());  
              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configPro",7, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // errorsA ::= SIGNO_A ERRORS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorsA",53, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // errorsC ::= SIGNO_A DIVISION ERRORS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorsC",54, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // errorA ::= SIGNO_A ERR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorA",55, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // errorC ::= SIGNO_A DIVISION ERR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("errorC",56, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lexemaA ::= SIGNO_A LEXEMA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lexemaA",57, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lexemaC ::= SIGNO_A DIVISION LEXEMA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lexemaC",58, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lineaA ::= SIGNO_A LINEA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lineaA",59, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lineaC ::= SIGNO_A DIVISION LINEA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("lineaC",60, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // columnA ::= SIGNO_A COLUMNA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("columnA",61, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // columnC ::= SIGNO_A DIVISION COLUMNA SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("columnC",62, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // descriptionA ::= SIGNO_A DESCRIPTION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descriptionA",63, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // descriptionC ::= SIGNO_A DIVISION DESCRIPTION SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("descriptionC",64, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // worldsA ::= SIGNO_A WORLDS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsA",10, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // worldsC ::= SIGNO_A DIVISION WORLDS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldsC",11, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // worldA ::= SIGNO_A WORLD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldA",12, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // worldC ::= SIGNO_A DIVISION WORLD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("worldC",13, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // nameA ::= SIGNO_A NAME SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameA",14, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // nameC ::= SIGNO_A DIVISION NAME SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("nameC",15, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rowsA ::= SIGNO_A ROWS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsA",16, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rowsC ::= SIGNO_A DIVISION ROWS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("rowsC",17, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // colsA ::= SIGNO_A COLS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsA",18, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // colsC ::= SIGNO_A DIVISION COLS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("colsC",19, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // configA ::= SIGNO_A CONFIG SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configA",20, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // configC ::= SIGNO_A DIVISION CONFIG SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("configC",21, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boardA ::= SIGNO_A BOARD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardA",22, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boardC ::= SIGNO_A DIVISION BOARD SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boardC",23, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boxA ::= SIGNO_A BOXES SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxA",26, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boxC ::= SIGNO_A DIVISION BOXES SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("boxC",27, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // targetA ::= SIGNO_A TARGETS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetA",28, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // targetC ::= SIGNO_A DIVISION TARGETS SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("targetC",29, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // playerA ::= SIGNO_A PLAYER SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerA",30, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // playerC ::= SIGNO_A DIVISION PLAYER SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("playerC",31, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // posX_A ::= SIGNO_A POS_X SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_A",32, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // posX_C ::= SIGNO_A DIVISION POS_X SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posX_C",33, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // posY_A ::= SIGNO_A POS_Y SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_A",34, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // posY_C ::= SIGNO_A DIVISION POS_Y SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("posY_C",35, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // typeA ::= SIGNO_A TYPE SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeA",36, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // typeC ::= SIGNO_A DIVISION TYPE SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("typeC",37, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // box_colorA ::= SIGNO_A BOX_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorA",38, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // box_colorC ::= SIGNO_A DIVISION BOX_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_colorC",39, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // box_on_target_colorA ::= SIGNO_A BOX_ON_TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorA",40, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // box_on_target_colorC ::= SIGNO_A DIVISION BOX_ON_TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("box_on_target_colorC",41, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // target_colorA ::= SIGNO_A TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorA",42, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // target_colorC ::= SIGNO_A DIVISION TARGET_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("target_colorC",43, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // brick_colorA ::= SIGNO_A BRICK_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorA",44, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // brick_colorC ::= SIGNO_A DIVISION BRICK_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("brick_colorC",45, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // hall_colorA ::= SIGNO_A HALL_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorA",46, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // hall_colorC ::= SIGNO_A DIVISION HALL_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("hall_colorC",47, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // undefined_colorA ::= SIGNO_A UNDEFINED_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorA",48, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // undefined_colorC ::= SIGNO_A DIVISION UNDEFINED_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("undefined_colorC",49, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // player_colorA ::= SIGNO_A PLAYER_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorA",50, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-2)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // player_colorC ::= SIGNO_A DIVISION PLAYER_COLOR SIGNO_C 
            {
              Object RESULT =null;

              CUP$ParserXml$result = parser.getSymbolFactory().newSymbol("player_colorC",51, ((java_cup.runtime.Symbol)CUP$ParserXml$stack.elementAt(CUP$ParserXml$top-3)), ((java_cup.runtime.Symbol)CUP$ParserXml$stack.peek()), RESULT);
            }
          return CUP$ParserXml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserXml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserXml$do_action(
    int                        CUP$ParserXml$act_num,
    java_cup.runtime.lr_parser CUP$ParserXml$parser,
    java.util.Stack            CUP$ParserXml$stack,
    int                        CUP$ParserXml$top)
    throws java.lang.Exception
    {
              return CUP$ParserXml$do_action_part00000000(
                               CUP$ParserXml$act_num,
                               CUP$ParserXml$parser,
                               CUP$ParserXml$stack,
                               CUP$ParserXml$top);
    }
}

}
