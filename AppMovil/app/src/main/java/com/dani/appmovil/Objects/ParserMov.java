
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.dani.appmovil.Objects;

import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserMov extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserMovSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserMov() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserMov(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserMov(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\010\005\000\002\010" +
    "\004\000\002\002\006\000\002\002\007\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\004" +
    "\003\000\002\004\003\000\002\006\003\000\002\006\005" +
    "\000\002\006\006\000\002\006\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\014\004\007\005\012\006\010\011\006\012" +
    "\005\001\002\000\004\022\054\001\002\000\004\022\ufffc" +
    "\001\002\000\004\022\ufffa\001\002\000\004\022\ufffb\001" +
    "\002\000\004\022\ufff9\001\002\000\016\002\051\004\007" +
    "\005\012\006\010\011\006\012\005\001\002\000\012\004" +
    "\007\006\010\011\006\012\005\001\002\000\004\013\014" +
    "\001\002\000\016\002\uffff\004\uffff\005\uffff\006\uffff\011" +
    "\uffff\012\uffff\001\002\000\004\022\016\001\002\000\014" +
    "\007\024\010\026\014\017\015\021\022\025\001\002\000" +
    "\014\016\ufff2\017\ufff2\020\ufff2\021\ufff2\023\ufff2\001\002" +
    "\000\014\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\001" +
    "\002\000\014\016\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0" +
    "\001\002\000\014\016\ufff6\017\046\020\ufff6\021\045\023" +
    "\ufff6\001\002\000\010\016\035\020\034\023\044\001\002" +
    "\000\004\022\041\001\002\000\014\007\024\010\026\014" +
    "\017\015\021\022\025\001\002\000\004\022\030\001\002" +
    "\000\014\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\001" +
    "\002\000\012\007\024\010\026\015\021\022\025\001\002" +
    "\000\004\023\032\001\002\000\014\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\023\uffee\001\002\000\010\016\035\020\034" +
    "\023\036\001\002\000\014\007\024\010\026\014\017\015" +
    "\021\022\025\001\002\000\014\007\024\010\026\014\017" +
    "\015\021\022\025\001\002\000\014\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\023\uffef\001\002\000\010\016\ufff8\020\034" +
    "\023\ufff8\001\002\000\010\016\ufff7\020\ufff7\023\ufff7\001" +
    "\002\000\012\007\024\010\026\015\021\022\025\001\002" +
    "\000\004\023\043\001\002\000\014\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\023\uffed\001\002\000\004\013\ufffd\001\002" +
    "\000\014\007\024\010\026\014\017\015\021\022\025\001" +
    "\002\000\014\007\024\010\026\014\017\015\021\022\025" +
    "\001\002\000\014\016\ufff5\017\ufff5\020\ufff5\021\045\023" +
    "\ufff5\001\002\000\014\016\ufff4\017\ufff4\020\ufff4\021\ufff4" +
    "\023\ufff4\001\002\000\004\002\001\001\002\000\004\013" +
    "\053\001\002\000\016\002\000\004\000\005\000\006\000" +
    "\011\000\012\000\001\002\000\014\007\024\010\026\014" +
    "\017\015\021\022\025\001\002\000\010\016\035\020\034" +
    "\023\056\001\002\000\004\013\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\002\012\003\003\010\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\051\003\003\001" +
    "\001\000\004\003\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\017\005\021\006" +
    "\026\007\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\017\005\021\006\026\007\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\017\005\021\006\026\007\037\001" +
    "\001\000\012\004\017\005\021\006\026\007\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\017\005\047\006\026\001" +
    "\001\000\010\004\017\005\046\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\017\005\021\006\026" +
    "\007\054\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserMov$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserMov$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserMov$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserMov$actions {
  private final ParserMov parser;

  /** Constructor */
  CUP$ParserMov$actions(ParserMov parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserMov$do_action_part00000000(
    int                        CUP$ParserMov$act_num,
    java_cup.runtime.lr_parser CUP$ParserMov$parser,
    java.util.Stack            CUP$ParserMov$stack,
    int                        CUP$ParserMov$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserMov$result;

      /* select the action based on the action number */
      switch (CUP$ParserMov$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		ArrayList<Integer> start_val = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT = start_val;
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserMov$parser.done_parsing();
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expr ::= expr typeMov PUNTO_COMA 
            {
              ArrayList<Integer> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).right;
		ArrayList<Integer> n1 = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		
                n1.add((Integer)a1);
                RESULT=n1;
                
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= typeMov PUNTO_COMA 
            {
              ArrayList<Integer> RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		
             RESULT= new ArrayList<Integer>();
             RESULT.add((Integer)a1);
             
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // typeMov ::= instr L_PARENT operacion1 R_PARENT 
            {
              Integer RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT= a1.intValue();
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("typeMov",0, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-3)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // typeMov ::= PUSH instr L_PARENT operacion1 R_PARENT 
            {
              Integer RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT= a1.intValue();
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("typeMov",0, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-4)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= UP 
            {
              Object RESULT =null;

              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= DOWN 
            {
              Object RESULT =null;

              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= LEFT 
            {
              Object RESULT =null;

              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= RIGHT 
            {
              Object RESULT =null;

              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("instr",1, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion1 ::= operacion1 SUMA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 + a2 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion1",5, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion1 ::= operacion1 RESTA operacion1 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 - a2 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion1",5, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion1 ::= operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion1",5, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion2 ::= operacion2 MULTIPLY operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 * a2 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion2",3, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacion2 ::= operacion2 DIVISION operacion2 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a2 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 / a2 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion2",3, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacion2 ::= operacion3 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = a1 ; 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion2",3, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacion3 ::= NUM 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion3",2, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion3 ::= operacion4 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		RESULT =a1;
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion3",2, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion4 ::= DECIMAL 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()).right;
		Token a1 = (Token)((java_cup.runtime.Symbol) CUP$ParserMov$stack.peek()).value;
		 RESULT = Double.parseDouble(a1.getLexeme()); 
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion4",4, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion4 ::= L_PARENT operacion1 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT =a1;
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion4",4, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-2)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion4 ::= CEIL L_PARENT operacion4 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT = Math.ceil(a1);
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion4",4, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-3)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion4 ::= FLOOR L_PARENT operacion4 R_PARENT 
            {
              Double RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).right;
		Double a1 = (Double)((java_cup.runtime.Symbol) CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-1)).value;
		RESULT = Math.floor(a1);
              CUP$ParserMov$result = parser.getSymbolFactory().newSymbol("operacion4",4, ((java_cup.runtime.Symbol)CUP$ParserMov$stack.elementAt(CUP$ParserMov$top-3)), ((java_cup.runtime.Symbol)CUP$ParserMov$stack.peek()), RESULT);
            }
          return CUP$ParserMov$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserMov$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserMov$do_action(
    int                        CUP$ParserMov$act_num,
    java_cup.runtime.lr_parser CUP$ParserMov$parser,
    java.util.Stack            CUP$ParserMov$stack,
    int                        CUP$ParserMov$top)
    throws java.lang.Exception
    {
              return CUP$ParserMov$do_action_part00000000(
                               CUP$ParserMov$act_num,
                               CUP$ParserMov$parser,
                               CUP$ParserMov$stack,
                               CUP$ParserMov$top);
    }
}

}
